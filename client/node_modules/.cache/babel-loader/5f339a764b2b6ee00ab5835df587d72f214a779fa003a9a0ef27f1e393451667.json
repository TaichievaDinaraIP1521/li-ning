{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dinat\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\lining\\\\client\\\\src\\\\context\\\\CartContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect, useRef } from 'react';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://localhost:5000/api';\nconst CartContext = /*#__PURE__*/createContext();\n\n// Данные администратора для тестирования\nconst ADMIN_CREDENTIALS = {\n  email: 'admin1@mail.ru',\n  password: 'admin12341234'\n};\nexport function CartProvider({\n  children\n}) {\n  _s();\n  const [state, setState] = useState({\n    cartItems: [],\n    user: JSON.parse(localStorage.getItem('user')) || null,\n    isAuthenticated: !!localStorage.getItem('user'),\n    isLoading: false,\n    error: null\n  });\n  const isMounted = useRef(true);\n  useEffect(() => {\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n  const safeSetState = newState => {\n    if (isMounted.current) {\n      setState(prevState => ({\n        ...prevState,\n        ...newState\n      }));\n    }\n  };\n\n  // Сохранение пользователя в localStorage и state\n  const saveUserToStorage = userData => {\n    var _userData$user;\n    if (!(userData !== null && userData !== void 0 && (_userData$user = userData.user) !== null && _userData$user !== void 0 && _userData$user.email)) {\n      console.warn('Неверные данные пользователя:', userData);\n      throw new Error('Пользователь должен содержать email');\n    }\n    const userToSave = userData.user;\n    localStorage.setItem('user', JSON.stringify(userToSave));\n    localStorage.setItem('token', userData.token);\n    safeSetState({\n      user: userToSave,\n      isAuthenticated: true\n    });\n    console.log('Пользователь сохранён в контексте:', userToSave); // ✅ Логируем\n  };\n\n  // Получение текущего пользователя с сервера\n  const fetchCurrentUser = async () => {\n    const token = localStorage.getItem('token');\n    if (!token) return;\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/me`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (!response.ok) throw new Error('Не удалось получить данные пользователя');\n      const data = await response.json();\n      console.log('Данные из /me:', data); // ✅ Проверяем ответ\n\n      localStorage.setItem('user', JSON.stringify(data.user));\n      safeSetState({\n        user: data.user\n      });\n    } catch (error) {\n      console.error('Ошибка получения текущего пользователя:', error);\n      logout();\n    }\n  };\n\n  // При монтировании проверяем наличие пользователя\n  useEffect(() => {\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      try {\n        const parsedUser = JSON.parse(storedUser);\n        safeSetState({\n          user: parsedUser,\n          isAuthenticated: true\n        });\n        fetchCurrentUser(); // ✅ Подгрузка данных с сервера\n      } catch (e) {\n        console.error('Ошибка парсинга пользователя из localStorage', e);\n      }\n    }\n  }, []);\n\n  // Получение корзины с сервера\n  const fetchCart = async userId => {\n    if (!userId) return;\n    safeSetState({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const response = await fetch(`${API_BASE_URL}/cart/${userId}`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n      if (!response.ok) throw new Error('Ошибка загрузки корзины');\n      const data = await response.json();\n      safeSetState({\n        cartItems: data.items || []\n      });\n    } catch (error) {\n      safeSetState({\n        error: error.message\n      });\n      console.error('Ошибка загрузки корзины:', error);\n    } finally {\n      safeSetState({\n        isLoading: false\n      });\n    }\n  };\n\n  // Регистрация\n  const register = async (name, email, password) => {\n    safeSetState({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name,\n          email,\n          password\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Ошибка регистрации');\n      }\n      const userData = await response.json();\n      if (!userData.user || !userData.user.email) {\n        throw new Error('Неверный формат данных от сервера');\n      }\n      saveUserToStorage(userData); // ✅ Сохраняем пользователя\n      await fetchCart(userData.user.id); // Загружаем корзину\n      fetchCurrentUser(); // ✅ Принудительное обновление\n\n      return userData;\n    } catch (error) {\n      safeSetState({\n        error: error.message\n      });\n      throw error;\n    } finally {\n      safeSetState({\n        isLoading: false\n      });\n    }\n  };\n\n  // Вход\n  const login = async (email, password) => {\n    safeSetState({\n      isLoading: true,\n      error: null\n    });\n    try {\n      if (email === ADMIN_CREDENTIALS.email && password === ADMIN_CREDENTIALS.password) {\n        const adminUser = {\n          id: 'admin-1',\n          name: 'Admin',\n          email: ADMIN_CREDENTIALS.email,\n          isAdmin: true,\n          token: 'mock-admin-token'\n        };\n        localStorage.setItem('user', JSON.stringify(adminUser));\n        localStorage.setItem('token', adminUser.token);\n        safeSetState({\n          user: adminUser,\n          isAuthenticated: true,\n          isLoading: false\n        });\n        return adminUser;\n      }\n      const response = await fetch(`${API_BASE_URL}/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Ошибка входа');\n      }\n      const userData = await response.json();\n      if (!userData.user || !userData.user.email) {\n        throw new Error('Неверный формат данных пользователя');\n      }\n      saveUserToStorage(userData); // ✅ Сохраняем с email\n      await fetchCart(userData.user.id);\n      fetchCurrentUser(); // ✅ Обновляем через /me\n\n      return userData;\n    } catch (error) {\n      safeSetState({\n        error: error.message\n      });\n      console.error('Ошибка входа:', error);\n      throw error;\n    } finally {\n      safeSetState({\n        isLoading: false\n      });\n    }\n  };\n\n  // Выход\n  const logout = () => {\n    localStorage.removeItem('user');\n    localStorage.removeItem('token');\n    safeSetState({\n      user: null,\n      isAuthenticated: false,\n      cartItems: []\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cartItems: state.cartItems,\n      cartCount: state.cartItems.reduce((sum, item) => sum + item.quantity, 0),\n      addToCart: product => addToCart(product),\n      removeFromCart: cartId => removeFromCart(cartId),\n      updateQuantity: (cartId, quantity) => updateQuantity(cartId, quantity),\n      user: state.user,\n      isAuthenticated: state.isAuthenticated,\n      isLoading: state.isLoading,\n      error: state.error,\n      login: (email, password) => login(email, password),\n      logout: () => logout(),\n      register: (name, email, password) => register(name, email, password),\n      isAdmin: () => {\n        var _state$user;\n        return ((_state$user = state.user) === null || _state$user === void 0 ? void 0 : _state$user.isAdmin) === true;\n      },\n      fetchCurrentUser: () => fetchCurrentUser()\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 224,\n    columnNumber: 5\n  }, this);\n}\n_s(CartProvider, \"cCTeucHHgBkU3mSgEVKb5wp1gCA=\");\n_c = CartProvider;\nexport const useCart = () => {\n  _s2();\n  const context = useContext(CartContext);\n  if (!context) {\n    throw new Error('useCart должен использоваться внутри CartProvider');\n  }\n  return context;\n};\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","useRef","toast","jsxDEV","_jsxDEV","API_BASE_URL","CartContext","ADMIN_CREDENTIALS","email","password","CartProvider","children","_s","state","setState","cartItems","user","JSON","parse","localStorage","getItem","isAuthenticated","isLoading","error","isMounted","current","safeSetState","newState","prevState","saveUserToStorage","userData","_userData$user","console","warn","Error","userToSave","setItem","stringify","token","log","fetchCurrentUser","response","fetch","headers","ok","data","json","logout","storedUser","parsedUser","e","fetchCart","userId","items","message","register","name","method","body","errorData","id","login","adminUser","isAdmin","removeItem","Provider","value","cartCount","reduce","sum","item","quantity","addToCart","product","removeFromCart","cartId","updateQuantity","_state$user","fileName","_jsxFileName","lineNumber","columnNumber","_c","useCart","_s2","context","$RefreshReg$"],"sources":["C:/Users/dinat/OneDrive/Рабочий стол/lining/client/src/context/CartContext.js"],"sourcesContent":["import { createContext, useContext, useState, useEffect, useRef } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst API_BASE_URL = 'http://localhost:5000/api';\r\nconst CartContext = createContext();\r\n\r\n// Данные администратора для тестирования\r\nconst ADMIN_CREDENTIALS = {\r\n  email: 'admin1@mail.ru',\r\n  password: 'admin12341234'\r\n};\r\n\r\nexport function CartProvider({ children }) {\r\n  const [state, setState] = useState({\r\n    cartItems: [],\r\n    user: JSON.parse(localStorage.getItem('user')) || null,\r\n    isAuthenticated: !!localStorage.getItem('user'),\r\n    isLoading: false,\r\n    error: null\r\n  });\r\n\r\n  const isMounted = useRef(true);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      isMounted.current = false;\r\n    };\r\n  }, []);\r\n\r\n  const safeSetState = (newState) => {\r\n    if (isMounted.current) {\r\n      setState((prevState) => ({ ...prevState, ...newState }));\r\n    }\r\n  };\r\n\r\n  // Сохранение пользователя в localStorage и state\r\n  const saveUserToStorage = (userData) => {\r\n    if (!userData?.user?.email) {\r\n      console.warn('Неверные данные пользователя:', userData);\r\n      throw new Error('Пользователь должен содержать email');\r\n    }\r\n\r\n    const userToSave = userData.user;\r\n\r\n    localStorage.setItem('user', JSON.stringify(userToSave));\r\n    localStorage.setItem('token', userData.token);\r\n\r\n    safeSetState({ user: userToSave, isAuthenticated: true });\r\n    console.log('Пользователь сохранён в контексте:', userToSave); // ✅ Логируем\r\n  };\r\n\r\n  // Получение текущего пользователя с сервера\r\n  const fetchCurrentUser = async () => {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) return;\r\n\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/auth/me`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`\r\n        }\r\n      });\r\n\r\n      if (!response.ok) throw new Error('Не удалось получить данные пользователя');\r\n\r\n      const data = await response.json();\r\n      console.log('Данные из /me:', data); // ✅ Проверяем ответ\r\n\r\n      localStorage.setItem('user', JSON.stringify(data.user));\r\n      safeSetState({ user: data.user });\r\n    } catch (error) {\r\n      console.error('Ошибка получения текущего пользователя:', error);\r\n      logout();\r\n    }\r\n  };\r\n\r\n  // При монтировании проверяем наличие пользователя\r\n  useEffect(() => {\r\n    const storedUser = localStorage.getItem('user');\r\n    if (storedUser) {\r\n      try {\r\n        const parsedUser = JSON.parse(storedUser);\r\n        safeSetState({ user: parsedUser, isAuthenticated: true });\r\n        fetchCurrentUser(); // ✅ Подгрузка данных с сервера\r\n      } catch (e) {\r\n        console.error('Ошибка парсинга пользователя из localStorage', e);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  // Получение корзины с сервера\r\n  const fetchCart = async (userId) => {\r\n    if (!userId) return;\r\n\r\n    safeSetState({ isLoading: true, error: null });\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/cart/${userId}`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        }\r\n      });\r\n\r\n      if (!response.ok) throw new Error('Ошибка загрузки корзины');\r\n\r\n      const data = await response.json();\r\n      safeSetState({ cartItems: data.items || [] });\r\n    } catch (error) {\r\n      safeSetState({ error: error.message });\r\n      console.error('Ошибка загрузки корзины:', error);\r\n    } finally {\r\n      safeSetState({ isLoading: false });\r\n    }\r\n  };\r\n\r\n  // Регистрация\r\n  const register = async (name, email, password) => {\r\n    safeSetState({ isLoading: true, error: null });\r\n\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/auth/register`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ name, email, password })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.message || 'Ошибка регистрации');\r\n      }\r\n\r\n      const userData = await response.json();\r\n\r\n      if (!userData.user || !userData.user.email) {\r\n        throw new Error('Неверный формат данных от сервера');\r\n      }\r\n\r\n      saveUserToStorage(userData); // ✅ Сохраняем пользователя\r\n      await fetchCart(userData.user.id); // Загружаем корзину\r\n      fetchCurrentUser(); // ✅ Принудительное обновление\r\n\r\n      return userData;\r\n    } catch (error) {\r\n      safeSetState({ error: error.message });\r\n      throw error;\r\n    } finally {\r\n      safeSetState({ isLoading: false });\r\n    }\r\n  };\r\n\r\n  // Вход\r\n  const login = async (email, password) => {\r\n    safeSetState({ isLoading: true, error: null });\r\n\r\n    try {\r\n      if (\r\n        email === ADMIN_CREDENTIALS.email &&\r\n        password === ADMIN_CREDENTIALS.password\r\n      ) {\r\n        const adminUser = {\r\n          id: 'admin-1',\r\n          name: 'Admin',\r\n          email: ADMIN_CREDENTIALS.email,\r\n          isAdmin: true,\r\n          token: 'mock-admin-token'\r\n        };\r\n\r\n        localStorage.setItem('user', JSON.stringify(adminUser));\r\n        localStorage.setItem('token', adminUser.token);\r\n\r\n        safeSetState({\r\n          user: adminUser,\r\n          isAuthenticated: true,\r\n          isLoading: false\r\n        });\r\n\r\n        return adminUser;\r\n      }\r\n\r\n      const response = await fetch(`${API_BASE_URL}/auth/login`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ email, password })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.message || 'Ошибка входа');\r\n      }\r\n\r\n      const userData = await response.json();\r\n\r\n      if (!userData.user || !userData.user.email) {\r\n        throw new Error('Неверный формат данных пользователя');\r\n      }\r\n\r\n      saveUserToStorage(userData); // ✅ Сохраняем с email\r\n      await fetchCart(userData.user.id);\r\n      fetchCurrentUser(); // ✅ Обновляем через /me\r\n\r\n      return userData;\r\n    } catch (error) {\r\n      safeSetState({ error: error.message });\r\n      console.error('Ошибка входа:', error);\r\n      throw error;\r\n    } finally {\r\n      safeSetState({ isLoading: false });\r\n    }\r\n  };\r\n\r\n  // Выход\r\n  const logout = () => {\r\n    localStorage.removeItem('user');\r\n    localStorage.removeItem('token');\r\n\r\n    safeSetState({\r\n      user: null,\r\n      isAuthenticated: false,\r\n      cartItems: []\r\n    });\r\n  };\r\n\r\n  return (\r\n    <CartContext.Provider\r\n      value={{\r\n        cartItems: state.cartItems,\r\n        cartCount: state.cartItems.reduce((sum, item) => sum + item.quantity, 0),\r\n        addToCart: (product) => addToCart(product),\r\n        removeFromCart: (cartId) => removeFromCart(cartId),\r\n        updateQuantity: (cartId, quantity) => updateQuantity(cartId, quantity),\r\n        user: state.user,\r\n        isAuthenticated: state.isAuthenticated,\r\n        isLoading: state.isLoading,\r\n        error: state.error,\r\n        login: (email, password) => login(email, password),\r\n        logout: () => logout(),\r\n        register: (name, email, password) => register(name, email, password),\r\n        isAdmin: () => state.user?.isAdmin === true,\r\n        fetchCurrentUser: () => fetchCurrentUser()\r\n      }}\r\n    >\r\n      {children}\r\n    </CartContext.Provider>\r\n  );\r\n}\r\n\r\nexport const useCart = () => {\r\n  const context = useContext(CartContext);\r\n  if (!context) {\r\n    throw new Error('useCart должен использоваться внутри CartProvider');\r\n  }\r\n  return context;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}