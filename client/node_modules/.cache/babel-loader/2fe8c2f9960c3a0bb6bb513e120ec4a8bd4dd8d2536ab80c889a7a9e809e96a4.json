{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dinat\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\lining\\\\client\\\\src\\\\context\\\\CartContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext();\nexport function CartProvider({\n  children\n}) {\n  _s();\n  const [cartItems, setCartItems] = useState([]);\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const isMounted = useRef(true);\n\n  // Восстановление состояния при загрузке\n  useEffect(() => {\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      try {\n        const parsedUser = JSON.parse(storedUser);\n        safeSetState(setUser, parsedUser);\n        safeSetState(setIsAuthenticated, true);\n        fetchCart(parsedUser.id);\n      } catch (e) {\n        console.error('Failed to parse stored user', e);\n      }\n    }\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n  const safeSetState = (setter, value) => {\n    if (isMounted.current) {\n      setter(value);\n    }\n  };\n  const fetchCart = async userId => {\n    safeSetState(setIsLoading, true);\n    safeSetState(setError, null);\n    try {\n      const response = await fetch(`http://localhost:5000/api/cart/${userId}`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Ошибка загрузки корзины');\n      }\n      const data = await response.json();\n      safeSetState(setCartItems, data.items || []);\n    } catch (error) {\n      safeSetState(setError, error.message);\n      console.error('Ошибка загрузки корзины:', error);\n    } finally {\n      safeSetState(setIsLoading, false);\n    }\n  };\n  const saveCart = async items => {\n    if (!user) return;\n    safeSetState(setIsLoading, true);\n    safeSetState(setError, null);\n    try {\n      const response = await fetch(`http://localhost:5000/api/cart/${user.id}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        },\n        body: JSON.stringify({\n          items\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Ошибка сохранения корзины');\n      }\n    } catch (error) {\n      safeSetState(setError, error.message);\n      console.error('Ошибка сохранения корзины:', error);\n    } finally {\n      safeSetState(setIsLoading, false);\n    }\n  };\n\n  // Добавление товара\n  const addToCart = async product => {\n    if (!user) return;\n    const existingItem = cartItems.find(item => item.productId === product.id);\n    let updatedCart;\n    if (existingItem) {\n      updatedCart = cartItems.map(item => item.productId === product.id ? {\n        ...item,\n        quantity: item.quantity + 1\n      } : item);\n    } else {\n      updatedCart = [...cartItems, {\n        ...product,\n        cartId: `${product.id}_${Date.now()}`,\n        quantity: 1\n      }];\n    }\n    safeSetState(setCartItems, updatedCart);\n    await saveCart(updatedCart);\n  };\n\n  // Удаление товара\n  const removeFromCart = async cartId => {\n    if (!user) return;\n    const updatedCart = cartItems.filter(item => item.cartId !== cartId);\n    safeSetState(setCartItems, updatedCart);\n    await saveCart(updatedCart);\n  };\n\n  // Обновление количества\n  const updateQuantity = async (cartId, newQuantity) => {\n    if (!user) return;\n    const updatedCart = cartItems.map(item => item.cartId === cartId ? {\n      ...item,\n      quantity: Math.max(1, newQuantity)\n    } : item);\n    safeSetState(setCartItems, updatedCart);\n    await saveCart(updatedCart);\n  };\n\n  // Вход пользователя\n  const login = userData => {\n    localStorage.setItem('user', JSON.stringify(userData));\n    localStorage.setItem('token', userData.token || '');\n    safeSetState(setUser, userData);\n    safeSetState(setIsAuthenticated, true);\n    fetchCart(userData.id);\n  };\n\n  // Выход\n  const logout = () => {\n    localStorage.removeItem('user');\n    localStorage.removeItem('token');\n    safeSetState(setUser, null);\n    safeSetState(setIsAuthenticated, false);\n    safeSetState(setCartItems, []);\n  };\n\n  // Вход администратора (тестовый)\n  const adminLogin = async () => {\n    safeSetState(setIsLoading, true);\n    try {\n      const adminUser = {\n        id: 'admin-123',\n        name: 'Администратор',\n        email: 'admin@example.com',\n        isAdmin: true,\n        token: 'mock-admin-token',\n        avatar: 'https://i.pravatar.cc/150?u=admin'\n      };\n\n      // Сохраняем в localStorage\n      localStorage.setItem('user', JSON.stringify(adminUser));\n      localStorage.setItem('token', adminUser.token);\n\n      // Обновляем состояние\n      safeSetState(setUser, adminUser);\n      safeSetState(setIsAuthenticated, true);\n      await fetchCart(adminUser.id);\n      return adminUser;\n    } catch (error) {\n      safeSetState(setError, 'Ошибка входа администратора');\n      console.error('Admin login error:', error);\n      throw error;\n    } finally {\n      safeSetState(setIsLoading, false);\n    }\n  };\n\n  // Проверка прав администратора\n  const isAdmin = () => {\n    return (user === null || user === void 0 ? void 0 : user.isAdmin) === true;\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cartItems,\n      cartCount: cartItems.reduce((sum, item) => sum + item.quantity, 0),\n      addToCart,\n      removeFromCart,\n      updateQuantity,\n      user,\n      isAuthenticated,\n      isLoading,\n      error,\n      login,\n      logout,\n      adminLogin,\n      isAdmin // Добавляем функцию проверки прав\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 195,\n    columnNumber: 5\n  }, this);\n}\n_s(CartProvider, \"oZkic/+/2QuFnEPORiLKctUUt8s=\");\n_c = CartProvider;\nexport const useCart = () => {\n  _s2();\n  const context = useContext(CartContext);\n  if (!context) {\n    throw new Error('useCart must be used within a CartProvider');\n  }\n  return context;\n};\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","useRef","jsxDEV","_jsxDEV","CartContext","CartProvider","children","_s","cartItems","setCartItems","user","setUser","isAuthenticated","setIsAuthenticated","isLoading","setIsLoading","error","setError","isMounted","storedUser","localStorage","getItem","parsedUser","JSON","parse","safeSetState","fetchCart","id","e","console","current","setter","value","userId","response","fetch","headers","ok","Error","data","json","items","message","saveCart","method","body","stringify","addToCart","product","existingItem","find","item","productId","updatedCart","map","quantity","cartId","Date","now","removeFromCart","filter","updateQuantity","newQuantity","Math","max","login","userData","setItem","token","logout","removeItem","adminLogin","adminUser","name","email","isAdmin","avatar","Provider","cartCount","reduce","sum","fileName","_jsxFileName","lineNumber","columnNumber","_c","useCart","_s2","context","$RefreshReg$"],"sources":["C:/Users/dinat/OneDrive/Рабочий стол/lining/client/src/context/CartContext.js"],"sourcesContent":["import { createContext, useContext, useState, useEffect, useRef } from 'react';\r\n\r\nconst CartContext = createContext();\r\n\r\nexport function CartProvider({ children }) {\r\n  const [cartItems, setCartItems] = useState([]);\r\n  const [user, setUser] = useState(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const isMounted = useRef(true);\r\n\r\n  // Восстановление состояния при загрузке\r\n  useEffect(() => {\r\n    const storedUser = localStorage.getItem('user');\r\n    if (storedUser) {\r\n      try {\r\n        const parsedUser = JSON.parse(storedUser);\r\n        safeSetState(setUser, parsedUser);\r\n        safeSetState(setIsAuthenticated, true);\r\n        fetchCart(parsedUser.id);\r\n      } catch (e) {\r\n        console.error('Failed to parse stored user', e);\r\n      }\r\n    }\r\n\r\n    return () => {\r\n      isMounted.current = false;\r\n    };\r\n  }, []);\r\n\r\n  const safeSetState = (setter, value) => {\r\n    if (isMounted.current) {\r\n      setter(value);\r\n    }\r\n  };\r\n\r\n  const fetchCart = async (userId) => {\r\n    safeSetState(setIsLoading, true);\r\n    safeSetState(setError, null);\r\n    try {\r\n      const response = await fetch(`http://localhost:5000/api/cart/${userId}`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        }\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error('Ошибка загрузки корзины');\r\n      }\r\n      \r\n      const data = await response.json();\r\n      safeSetState(setCartItems, data.items || []);\r\n    } catch (error) {\r\n      safeSetState(setError, error.message);\r\n      console.error('Ошибка загрузки корзины:', error);\r\n    } finally {\r\n      safeSetState(setIsLoading, false);\r\n    }\r\n  };\r\n\r\n  const saveCart = async (items) => {\r\n    if (!user) return;\r\n    \r\n    safeSetState(setIsLoading, true);\r\n    safeSetState(setError, null);\r\n    try {\r\n      const response = await fetch(`http://localhost:5000/api/cart/${user.id}`, {\r\n        method: 'POST',\r\n        headers: { \r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        },\r\n        body: JSON.stringify({ items }),\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error('Ошибка сохранения корзины');\r\n      }\r\n    } catch (error) {\r\n      safeSetState(setError, error.message);\r\n      console.error('Ошибка сохранения корзины:', error);\r\n    } finally {\r\n      safeSetState(setIsLoading, false);\r\n    }\r\n  };\r\n\r\n  // Добавление товара\r\n  const addToCart = async (product) => {\r\n    if (!user) return;\r\n    \r\n    const existingItem = cartItems.find(item => item.productId === product.id);\r\n    let updatedCart;\r\n    \r\n    if (existingItem) {\r\n      updatedCart = cartItems.map(item => \r\n        item.productId === product.id \r\n          ? { ...item, quantity: item.quantity + 1 } \r\n          : item\r\n      );\r\n    } else {\r\n      updatedCart = [\r\n        ...cartItems,\r\n        {\r\n          ...product,\r\n          cartId: `${product.id}_${Date.now()}`,\r\n          quantity: 1\r\n        }\r\n      ];\r\n    }\r\n    \r\n    safeSetState(setCartItems, updatedCart);\r\n    await saveCart(updatedCart);\r\n  };\r\n\r\n  // Удаление товара\r\n  const removeFromCart = async (cartId) => {\r\n    if (!user) return;\r\n    \r\n    const updatedCart = cartItems.filter(item => item.cartId !== cartId);\r\n    safeSetState(setCartItems, updatedCart);\r\n    await saveCart(updatedCart);\r\n  };\r\n\r\n  // Обновление количества\r\n  const updateQuantity = async (cartId, newQuantity) => {\r\n    if (!user) return;\r\n    \r\n    const updatedCart = cartItems.map(item => \r\n      item.cartId === cartId \r\n        ? { ...item, quantity: Math.max(1, newQuantity) } \r\n        : item\r\n    );\r\n    \r\n    safeSetState(setCartItems, updatedCart);\r\n    await saveCart(updatedCart);\r\n  };\r\n\r\n  // Вход пользователя\r\n  const login = (userData) => {\r\n    localStorage.setItem('user', JSON.stringify(userData));\r\n    localStorage.setItem('token', userData.token || '');\r\n    safeSetState(setUser, userData);\r\n    safeSetState(setIsAuthenticated, true);\r\n    fetchCart(userData.id);\r\n  };\r\n\r\n  // Выход\r\n  const logout = () => {\r\n    localStorage.removeItem('user');\r\n    localStorage.removeItem('token');\r\n    safeSetState(setUser, null);\r\n    safeSetState(setIsAuthenticated, false);\r\n    safeSetState(setCartItems, []);\r\n  };\r\n\r\n  // Вход администратора (тестовый)\r\n  const adminLogin = async () => {\r\n    safeSetState(setIsLoading, true);\r\n    try {\r\n      const adminUser = {\r\n        id: 'admin-123',\r\n        name: 'Администратор',\r\n        email: 'admin@example.com',\r\n        isAdmin: true,\r\n        token: 'mock-admin-token',\r\n        avatar: 'https://i.pravatar.cc/150?u=admin'\r\n      };\r\n      \r\n      // Сохраняем в localStorage\r\n      localStorage.setItem('user', JSON.stringify(adminUser));\r\n      localStorage.setItem('token', adminUser.token);\r\n      \r\n      // Обновляем состояние\r\n      safeSetState(setUser, adminUser);\r\n      safeSetState(setIsAuthenticated, true);\r\n      await fetchCart(adminUser.id);\r\n      \r\n      return adminUser;\r\n    } catch (error) {\r\n      safeSetState(setError, 'Ошибка входа администратора');\r\n      console.error('Admin login error:', error);\r\n      throw error;\r\n    } finally {\r\n      safeSetState(setIsLoading, false);\r\n    }\r\n  };\r\n\r\n  // Проверка прав администратора\r\n  const isAdmin = () => {\r\n    return user?.isAdmin === true;\r\n  };\r\n\r\n  return (\r\n    <CartContext.Provider\r\n      value={{\r\n        cartItems,\r\n        cartCount: cartItems.reduce((sum, item) => sum + item.quantity, 0),\r\n        addToCart,\r\n        removeFromCart,\r\n        updateQuantity,\r\n        user,\r\n        isAuthenticated,\r\n        isLoading,\r\n        error,\r\n        login,\r\n        logout,\r\n        adminLogin,\r\n        isAdmin // Добавляем функцию проверки прав\r\n      }}\r\n    >\r\n      {children}\r\n    </CartContext.Provider>\r\n  );\r\n}\r\n\r\nexport const useCart = () => {\r\n  const context = useContext(CartContext);\r\n  if (!context) {\r\n    throw new Error('useCart must be used within a CartProvider');\r\n  }\r\n  return context;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}