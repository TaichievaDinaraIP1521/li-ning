{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dinat\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\lining\\\\client\\\\src\\\\context\\\\CartContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect, useRef } from 'react';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://localhost:5000/api';\nconst CartContext = /*#__PURE__*/createContext();\n\n// Данные администратора для тестирования\nconst ADMIN_CREDENTIALS = {\n  email: 'admin1@mail.ru',\n  password: 'admin12341234'\n};\nexport function CartProvider({\n  children\n}) {\n  _s();\n  const [state, setState] = useState({\n    cartItems: [],\n    user: JSON.parse(localStorage.getItem('user')) || null,\n    isAuthenticated: !!localStorage.getItem('user'),\n    isLoading: false,\n    error: null\n  });\n  const isMounted = useRef(true);\n  useEffect(() => {\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n  const safeSetState = newState => {\n    if (isMounted.current) {\n      setState(prevState => ({\n        ...prevState,\n        ...newState\n      }));\n    }\n  };\n\n  // Сохранение пользователя в localStorage и state\n  const saveUserToStorage = userData => {\n    if (!userData.user || !userData.user.email) {\n      throw new Error('Неверный формат данных пользователя');\n    }\n    localStorage.setItem('user', JSON.stringify(userData.user));\n    localStorage.setItem('token', userData.token);\n    safeSetState({\n      user: userData.user,\n      isAuthenticated: true\n    });\n  };\n\n  // Получение текущего пользователя с сервера\n  const fetchCurrentUser = async () => {\n    const token = localStorage.getItem('token');\n    if (!token) return;\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/me`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (!response.ok) throw new Error('Не удалось получить данные пользователя');\n      const data = await response.json();\n      const userData = data.user;\n      localStorage.setItem('user', JSON.stringify(userData));\n      safeSetState({\n        user: userData\n      });\n    } catch (error) {\n      console.error('Ошибка получения текущего пользователя:', error);\n      logout(); // Логаут, если токен недействителен\n    }\n  };\n\n  // Загрузка данных пользователя и корзины при монтировании\n  useEffect(() => {\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      try {\n        const parsedUser = JSON.parse(storedUser);\n        safeSetState({\n          user: parsedUser,\n          isAuthenticated: true\n        });\n\n        // Подгрузка актуальных данных пользователя\n        fetchCurrentUser();\n      } catch (e) {\n        console.error('Ошибка парсинга пользователя из localStorage', e);\n      }\n    }\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n\n  // Получение корзины с сервера\n  const fetchCart = async userId => {\n    if (!userId) return;\n    safeSetState({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const response = await fetch(`${API_BASE_URL}/cart/${userId}`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n      if (!response.ok) throw new Error('Ошибка загрузки корзины');\n      const data = await response.json();\n      safeSetState({\n        cartItems: data.items || []\n      });\n    } catch (error) {\n      safeSetState({\n        error: error.message\n      });\n      console.error('Ошибка загрузки корзины:', error);\n    } finally {\n      safeSetState({\n        isLoading: false\n      });\n    }\n  };\n\n  // Сохранение корзины на сервер\n  const saveCart = async items => {\n    var _state$user;\n    if (!((_state$user = state.user) !== null && _state$user !== void 0 && _state$user.id)) return;\n    safeSetState({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const response = await fetch(`${API_BASE_URL}/cart/${state.user.id}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        },\n        body: JSON.stringify({\n          items\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Ошибка сохранения корзины');\n      }\n    } catch (error) {\n      safeSetState({\n        error: error.message\n      });\n      console.error('Ошибка сохранения корзины:', error);\n    } finally {\n      safeSetState({\n        isLoading: false\n      });\n    }\n  };\n\n  // Добавление товара в корзину\n  const addToCart = async product => {\n    if (!state.user) {\n      toast.error('Для добавления товаров в корзину необходимо войти в систему');\n      return;\n    }\n    const existingItem = state.cartItems.find(item => item.productId === product.id);\n    let updatedCart;\n    if (existingItem) {\n      updatedCart = state.cartItems.map(item => item.productId === product.id ? {\n        ...item,\n        quantity: item.quantity + 1\n      } : item);\n    } else {\n      updatedCart = [...state.cartItems, {\n        productId: product.id,\n        name: product.name,\n        price: product.price,\n        image: product.image,\n        cartId: `${product.id}_${Date.now()}`,\n        quantity: 1\n      }];\n    }\n    safeSetState({\n      cartItems: updatedCart\n    });\n    await saveCart(updatedCart);\n    toast.success('Товар добавлен в корзину');\n  };\n\n  // Удаление товара из корзины\n  const removeFromCart = async cartId => {\n    if (!state.user) return;\n    const updatedCart = state.cartItems.filter(item => item.cartId !== cartId);\n    safeSetState({\n      cartItems: updatedCart\n    });\n    await saveCart(updatedCart);\n  };\n\n  // Обновление количества товара\n  const updateQuantity = async (cartId, newQuantity) => {\n    if (!state.user) return;\n    const updatedCart = state.cartItems.map(item => item.cartId === cartId ? {\n      ...item,\n      quantity: Math.max(1, newQuantity)\n    } : item);\n    safeSetState({\n      cartItems: updatedCart\n    });\n    await saveCart(updatedCart);\n  };\n\n  // Регистрация пользователя\n  const register = async (name, email, password) => {\n    safeSetState({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name,\n          email,\n          password\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Ошибка регистрации');\n      }\n      const userData = await response.json();\n      if (!userData.user || !userData.user.email) {\n        throw new Error('Неверный формат ответа сервера');\n      }\n      saveUserToStorage(userData); // Сохраняем пользователя\n      await fetchCart(userData.user.id); // Загружаем корзину\n\n      return userData;\n    } catch (error) {\n      safeSetState({\n        error: error.message\n      });\n      throw error;\n    } finally {\n      safeSetState({\n        isLoading: false\n      });\n    }\n  };\n\n  // Вход пользователя или админа\n  const login = async (email, password) => {\n    safeSetState({\n      isLoading: true,\n      error: null\n    });\n    try {\n      // Проверка на админа\n      if (email === ADMIN_CREDENTIALS.email && password === ADMIN_CREDENTIALS.password) {\n        const adminUser = {\n          id: 'admin-1',\n          name: 'Admin',\n          email: ADMIN_CREDENTIALS.email,\n          isAdmin: true,\n          token: 'mock-admin-token'\n        };\n        localStorage.setItem('user', JSON.stringify(adminUser));\n        localStorage.setItem('token', adminUser.token);\n        safeSetState({\n          user: adminUser,\n          isAuthenticated: true,\n          isLoading: false\n        });\n        return adminUser;\n      }\n\n      // Логика для обычного пользователя\n      const response = await fetch(`${API_BASE_URL}/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Ошибка входа');\n      }\n      const userData = await response.json();\n      if (!userData.user || !userData.user.email) {\n        throw new Error('Неверный формат данных пользователя');\n      }\n      saveUserToStorage(userData); // Сохраняем с email\n      await fetchCart(userData.user.id);\n      fetchCurrentUser(); // Принудительное обновление профиля\n\n      return userData;\n    } catch (error) {\n      safeSetState({\n        error: error.message\n      });\n      console.error('Ошибка входа:', error);\n      throw error;\n    } finally {\n      safeSetState({\n        isLoading: false\n      });\n    }\n  };\n\n  // Выход из аккаунта\n  const logout = () => {\n    localStorage.removeItem('user');\n    localStorage.removeItem('token');\n    safeSetState({\n      user: null,\n      isAuthenticated: false,\n      cartItems: []\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cartItems: state.cartItems,\n      cartCount: state.cartItems.reduce((sum, item) => sum + item.quantity, 0),\n      addToCart,\n      removeFromCart,\n      updateQuantity,\n      user: state.user,\n      isAuthenticated: state.isAuthenticated,\n      isLoading: state.isLoading,\n      error: state.error,\n      login,\n      logout,\n      register,\n      isAdmin: () => {\n        var _state$user2;\n        return ((_state$user2 = state.user) === null || _state$user2 === void 0 ? void 0 : _state$user2.isAdmin) === true;\n      },\n      fetchCurrentUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 315,\n    columnNumber: 5\n  }, this);\n}\n_s(CartProvider, \"cCTeucHHgBkU3mSgEVKb5wp1gCA=\");\n_c = CartProvider;\nexport const useCart = () => {\n  _s2();\n  const context = useContext(CartContext);\n  if (!context) {\n    throw new Error('useCart должен использоваться внутри CartProvider');\n  }\n  return context;\n};\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","useRef","toast","jsxDEV","_jsxDEV","API_BASE_URL","CartContext","ADMIN_CREDENTIALS","email","password","CartProvider","children","_s","state","setState","cartItems","user","JSON","parse","localStorage","getItem","isAuthenticated","isLoading","error","isMounted","current","safeSetState","newState","prevState","saveUserToStorage","userData","Error","setItem","stringify","token","fetchCurrentUser","response","fetch","headers","ok","data","json","console","logout","storedUser","parsedUser","e","fetchCart","userId","items","message","saveCart","_state$user","id","method","body","addToCart","product","existingItem","find","item","productId","updatedCart","map","quantity","name","price","image","cartId","Date","now","success","removeFromCart","filter","updateQuantity","newQuantity","Math","max","register","errorData","login","adminUser","isAdmin","removeItem","Provider","value","cartCount","reduce","sum","_state$user2","fileName","_jsxFileName","lineNumber","columnNumber","_c","useCart","_s2","context","$RefreshReg$"],"sources":["C:/Users/dinat/OneDrive/Рабочий стол/lining/client/src/context/CartContext.js"],"sourcesContent":["import { createContext, useContext, useState, useEffect, useRef } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst API_BASE_URL = 'http://localhost:5000/api';\r\nconst CartContext = createContext();\r\n\r\n// Данные администратора для тестирования\r\nconst ADMIN_CREDENTIALS = {\r\n  email: 'admin1@mail.ru',\r\n  password: 'admin12341234'\r\n};\r\n\r\nexport function CartProvider({ children }) {\r\n  const [state, setState] = useState({\r\n    cartItems: [],\r\n    user: JSON.parse(localStorage.getItem('user')) || null,\r\n    isAuthenticated: !!localStorage.getItem('user'),\r\n    isLoading: false,\r\n    error: null\r\n  });\r\n\r\n  const isMounted = useRef(true);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      isMounted.current = false;\r\n    };\r\n  }, []);\r\n\r\n  const safeSetState = (newState) => {\r\n    if (isMounted.current) {\r\n      setState((prevState) => ({ ...prevState, ...newState }));\r\n    }\r\n  };\r\n\r\n  // Сохранение пользователя в localStorage и state\r\n  const saveUserToStorage = (userData) => {\r\n    if (!userData.user || !userData.user.email) {\r\n      throw new Error('Неверный формат данных пользователя');\r\n    }\r\n\r\n    localStorage.setItem('user', JSON.stringify(userData.user));\r\n    localStorage.setItem('token', userData.token);\r\n    safeSetState({ user: userData.user, isAuthenticated: true });\r\n  };\r\n\r\n  // Получение текущего пользователя с сервера\r\n  const fetchCurrentUser = async () => {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) return;\r\n\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/auth/me`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`\r\n        }\r\n      });\r\n\r\n      if (!response.ok) throw new Error('Не удалось получить данные пользователя');\r\n\r\n      const data = await response.json();\r\n      const userData = data.user;\r\n\r\n      localStorage.setItem('user', JSON.stringify(userData));\r\n      safeSetState({ user: userData });\r\n    } catch (error) {\r\n      console.error('Ошибка получения текущего пользователя:', error);\r\n      logout(); // Логаут, если токен недействителен\r\n    }\r\n  };\r\n\r\n  // Загрузка данных пользователя и корзины при монтировании\r\n  useEffect(() => {\r\n    const storedUser = localStorage.getItem('user');\r\n    if (storedUser) {\r\n      try {\r\n        const parsedUser = JSON.parse(storedUser);\r\n        safeSetState({ user: parsedUser, isAuthenticated: true });\r\n\r\n        // Подгрузка актуальных данных пользователя\r\n        fetchCurrentUser();\r\n      } catch (e) {\r\n        console.error('Ошибка парсинга пользователя из localStorage', e);\r\n      }\r\n    }\r\n\r\n    return () => {\r\n      isMounted.current = false;\r\n    };\r\n  }, []);\r\n\r\n  // Получение корзины с сервера\r\n  const fetchCart = async (userId) => {\r\n    if (!userId) return;\r\n\r\n    safeSetState({ isLoading: true, error: null });\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/cart/${userId}`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        }\r\n      });\r\n\r\n      if (!response.ok) throw new Error('Ошибка загрузки корзины');\r\n\r\n      const data = await response.json();\r\n      safeSetState({ cartItems: data.items || [] });\r\n    } catch (error) {\r\n      safeSetState({ error: error.message });\r\n      console.error('Ошибка загрузки корзины:', error);\r\n    } finally {\r\n      safeSetState({ isLoading: false });\r\n    }\r\n  };\r\n\r\n  // Сохранение корзины на сервер\r\n  const saveCart = async (items) => {\r\n    if (!state.user?.id) return;\r\n\r\n    safeSetState({ isLoading: true, error: null });\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/cart/${state.user.id}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        },\r\n        body: JSON.stringify({ items }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Ошибка сохранения корзины');\r\n      }\r\n    } catch (error) {\r\n      safeSetState({ error: error.message });\r\n      console.error('Ошибка сохранения корзины:', error);\r\n    } finally {\r\n      safeSetState({ isLoading: false });\r\n    }\r\n  };\r\n\r\n  // Добавление товара в корзину\r\n  const addToCart = async (product) => {\r\n    if (!state.user) {\r\n      toast.error('Для добавления товаров в корзину необходимо войти в систему');\r\n      return;\r\n    }\r\n\r\n    const existingItem = state.cartItems.find(\r\n      (item) => item.productId === product.id\r\n    );\r\n\r\n    let updatedCart;\r\n    if (existingItem) {\r\n      updatedCart = state.cartItems.map((item) =>\r\n        item.productId === product.id\r\n          ? { ...item, quantity: item.quantity + 1 }\r\n          : item\r\n      );\r\n    } else {\r\n      updatedCart = [\r\n        ...state.cartItems,\r\n        {\r\n          productId: product.id,\r\n          name: product.name,\r\n          price: product.price,\r\n          image: product.image,\r\n          cartId: `${product.id}_${Date.now()}`,\r\n          quantity: 1\r\n        }\r\n      ];\r\n    }\r\n\r\n    safeSetState({ cartItems: updatedCart });\r\n    await saveCart(updatedCart);\r\n    toast.success('Товар добавлен в корзину');\r\n  };\r\n\r\n  // Удаление товара из корзины\r\n  const removeFromCart = async (cartId) => {\r\n    if (!state.user) return;\r\n\r\n    const updatedCart = state.cartItems.filter(\r\n      (item) => item.cartId !== cartId\r\n    );\r\n\r\n    safeSetState({ cartItems: updatedCart });\r\n    await saveCart(updatedCart);\r\n  };\r\n\r\n  // Обновление количества товара\r\n  const updateQuantity = async (cartId, newQuantity) => {\r\n    if (!state.user) return;\r\n\r\n    const updatedCart = state.cartItems.map((item) =>\r\n      item.cartId === cartId\r\n        ? { ...item, quantity: Math.max(1, newQuantity) }\r\n        : item\r\n    );\r\n\r\n    safeSetState({ cartItems: updatedCart });\r\n    await saveCart(updatedCart);\r\n  };\r\n\r\n  // Регистрация пользователя\r\n  const register = async (name, email, password) => {\r\n    safeSetState({ isLoading: true, error: null });\r\n\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/auth/register`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ name, email, password })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.message || 'Ошибка регистрации');\r\n      }\r\n\r\n      const userData = await response.json();\r\n\r\n      if (!userData.user || !userData.user.email) {\r\n        throw new Error('Неверный формат ответа сервера');\r\n      }\r\n\r\n      saveUserToStorage(userData); // Сохраняем пользователя\r\n      await fetchCart(userData.user.id); // Загружаем корзину\r\n\r\n      return userData;\r\n    } catch (error) {\r\n      safeSetState({ error: error.message });\r\n      throw error;\r\n    } finally {\r\n      safeSetState({ isLoading: false });\r\n    }\r\n  };\r\n\r\n  // Вход пользователя или админа\r\n  const login = async (email, password) => {\r\n    safeSetState({ isLoading: true, error: null });\r\n\r\n    try {\r\n      // Проверка на админа\r\n      if (\r\n        email === ADMIN_CREDENTIALS.email &&\r\n        password === ADMIN_CREDENTIALS.password\r\n      ) {\r\n        const adminUser = {\r\n          id: 'admin-1',\r\n          name: 'Admin',\r\n          email: ADMIN_CREDENTIALS.email,\r\n          isAdmin: true,\r\n          token: 'mock-admin-token'\r\n        };\r\n\r\n        localStorage.setItem('user', JSON.stringify(adminUser));\r\n        localStorage.setItem('token', adminUser.token);\r\n\r\n        safeSetState({\r\n          user: adminUser,\r\n          isAuthenticated: true,\r\n          isLoading: false\r\n        });\r\n\r\n        return adminUser;\r\n      }\r\n\r\n      // Логика для обычного пользователя\r\n      const response = await fetch(`${API_BASE_URL}/auth/login`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ email, password })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.message || 'Ошибка входа');\r\n      }\r\n\r\n      const userData = await response.json();\r\n\r\n      if (!userData.user || !userData.user.email) {\r\n        throw new Error('Неверный формат данных пользователя');\r\n      }\r\n\r\n      saveUserToStorage(userData); // Сохраняем с email\r\n      await fetchCart(userData.user.id);\r\n      fetchCurrentUser(); // Принудительное обновление профиля\r\n\r\n      return userData;\r\n    } catch (error) {\r\n      safeSetState({ error: error.message });\r\n      console.error('Ошибка входа:', error);\r\n      throw error;\r\n    } finally {\r\n      safeSetState({ isLoading: false });\r\n    }\r\n  };\r\n\r\n  // Выход из аккаунта\r\n  const logout = () => {\r\n    localStorage.removeItem('user');\r\n    localStorage.removeItem('token');\r\n\r\n    safeSetState({\r\n      user: null,\r\n      isAuthenticated: false,\r\n      cartItems: []\r\n    });\r\n  };\r\n\r\n  return (\r\n    <CartContext.Provider\r\n      value={{\r\n        cartItems: state.cartItems,\r\n        cartCount: state.cartItems.reduce((sum, item) => sum + item.quantity, 0),\r\n        addToCart,\r\n        removeFromCart,\r\n        updateQuantity,\r\n        user: state.user,\r\n        isAuthenticated: state.isAuthenticated,\r\n        isLoading: state.isLoading,\r\n        error: state.error,\r\n        login,\r\n        logout,\r\n        register,\r\n        isAdmin: () => state.user?.isAdmin === true,\r\n        fetchCurrentUser\r\n      }}\r\n    >\r\n      {children}\r\n    </CartContext.Provider>\r\n  );\r\n}\r\n\r\nexport const useCart = () => {\r\n  const context = useContext(CartContext);\r\n  if (!context) {\r\n    throw new Error('useCart должен использоваться внутри CartProvider');\r\n  }\r\n  return context;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}