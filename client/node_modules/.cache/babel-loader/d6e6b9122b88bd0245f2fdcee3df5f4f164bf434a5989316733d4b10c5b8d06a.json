{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dinat\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\lining\\\\client\\\\src\\\\context\\\\CartContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect, useRef } from 'react';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://localhost:5000/api';\nconst CartContext = /*#__PURE__*/createContext();\n\n// Данные администратора для тестирования\nconst ADMIN_CREDENTIALS = {\n  email: 'admin1@mail.ru',\n  password: 'admin12341234'\n};\nexport function CartProvider({\n  children\n}) {\n  _s();\n  const [state, setState] = useState({\n    cartItems: [],\n    user: JSON.parse(localStorage.getItem('user')) || null,\n    isAuthenticated: !!localStorage.getItem('token'),\n    isLoading: false,\n    error: null\n  });\n  const isMounted = useRef(true);\n  useEffect(() => {\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n  const safeSetState = newState => {\n    if (isMounted.current) {\n      setState(prevState => ({\n        ...prevState,\n        ...newState\n      }));\n    }\n  };\n\n  // Проверка формата JWT токена\n  const validateToken = token => {\n    if (!token) return false;\n    return token.split('.').length === 3;\n  };\n\n  // Сохранение пользователя в localStorage и state\n  const saveUserToStorage = userData => {\n    var _userData$user;\n    if (!(userData !== null && userData !== void 0 && (_userData$user = userData.user) !== null && _userData$user !== void 0 && _userData$user.email) || !(userData !== null && userData !== void 0 && userData.token)) {\n      console.error('Неполные данные пользователя:', userData);\n      throw new Error('Отсутствуют обязательные данные пользователя');\n    }\n    if (!validateToken(userData.token)) {\n      throw new Error('Неверный формат токена');\n    }\n    localStorage.setItem('user', JSON.stringify(userData.user));\n    localStorage.setItem('token', userData.token);\n    safeSetState({\n      user: userData.user,\n      isAuthenticated: true\n    });\n  };\n\n  // Получение текущего пользователя с сервера\n  const fetchCurrentUser = async () => {\n    const token = localStorage.getItem('token');\n    if (!token || !validateToken(token)) {\n      logout();\n      return;\n    }\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/me`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      if (!data.user) {\n        throw new Error('Неверный формат ответа сервера');\n      }\n      localStorage.setItem('user', JSON.stringify(data.user));\n      safeSetState({\n        user: data.user\n      });\n    } catch (error) {\n      console.error('Ошибка получения пользователя:', error);\n      logout();\n    }\n  };\n\n  // Получение корзины с сервера\n  const fetchCart = async userId => {\n    if (!userId) return;\n    safeSetState({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const response = await fetch(`${API_BASE_URL}/cart/${userId}`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n      if (!response.ok) throw new Error('Ошибка загрузки корзины');\n      const data = await response.json();\n      safeSetState({\n        cartItems: data.items || []\n      });\n    } catch (error) {\n      safeSetState({\n        error: error.message\n      });\n      console.error('Ошибка загрузки корзины:', error);\n    } finally {\n      safeSetState({\n        isLoading: false\n      });\n    }\n  };\n\n  // Сохранение корзины на сервер\n  const saveCart = async items => {\n    var _state$user;\n    if (!((_state$user = state.user) !== null && _state$user !== void 0 && _state$user.id)) return;\n    safeSetState({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const response = await fetch(`${API_BASE_URL}/cart/${state.user.id}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        },\n        body: JSON.stringify({\n          items\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Ошибка сохранения корзины');\n      }\n    } catch (error) {\n      safeSetState({\n        error: error.message\n      });\n      console.error('Ошибка сохранения корзины:', error);\n    } finally {\n      safeSetState({\n        isLoading: false\n      });\n    }\n  };\n\n  // Добавление товара в корзину\n  const addToCart = async product => {\n    if (!state.user) {\n      toast.error('Для добавления товаров в корзину необходимо войти в систему');\n      return;\n    }\n    const existingItem = state.cartItems.find(item => item.productId === product.id);\n    let updatedCart;\n    if (existingItem) {\n      updatedCart = state.cartItems.map(item => item.productId === product.id ? {\n        ...item,\n        quantity: item.quantity + 1\n      } : item);\n    } else {\n      updatedCart = [...state.cartItems, {\n        productId: product.id,\n        name: product.name,\n        price: product.price,\n        image: product.image,\n        cartId: `${product.id}_${Date.now()}`,\n        quantity: 1\n      }];\n    }\n    safeSetState({\n      cartItems: updatedCart\n    });\n    await saveCart(updatedCart);\n    toast.success('Товар добавлен в корзину');\n  };\n\n  // Удаление товара из корзины\n  const removeFromCart = async cartId => {\n    if (!state.user) return;\n    const updatedCart = state.cartItems.filter(item => item.cartId !== cartId);\n    safeSetState({\n      cartItems: updatedCart\n    });\n    await saveCart(updatedCart);\n  };\n\n  // Обновление количества товара\n  const updateQuantity = async (cartId, newQuantity) => {\n    if (!state.user) return;\n    const updatedCart = state.cartItems.map(item => item.cartId === cartId ? {\n      ...item,\n      quantity: Math.max(1, newQuantity)\n    } : item);\n    safeSetState({\n      cartItems: updatedCart\n    });\n    await saveCart(updatedCart);\n  };\n\n  // Регистрация пользователя\n  const register = async (name, email, password) => {\n    safeSetState({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name,\n          email,\n          password\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || 'Ошибка регистрации');\n      }\n      if (!data.user || !data.token) {\n        throw new Error('Сервер не вернул необходимые данные');\n      }\n      saveUserToStorage(data);\n      await fetchCart(data.user.id);\n      return data;\n    } catch (error) {\n      safeSetState({\n        error: error.message\n      });\n      throw error;\n    } finally {\n      safeSetState({\n        isLoading: false\n      });\n    }\n  };\n\n  // Вход пользователя или админа\n  const login = async (email, password) => {\n    safeSetState({\n      isLoading: true,\n      error: null\n    });\n    try {\n      if (email === ADMIN_CREDENTIALS.email && password === ADMIN_CREDENTIALS.password) {\n        const adminData = {\n          user: {\n            id: 'admin-1',\n            name: 'Admin',\n            email: ADMIN_CREDENTIALS.email,\n            isAdmin: true\n          },\n          token: 'mock-admin-token'\n        };\n        saveUserToStorage(adminData);\n        return adminData;\n      }\n      const response = await fetch(`${API_BASE_URL}/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || 'Ошибка входа');\n      }\n      if (!data.user || !data.token) {\n        throw new Error('Сервер не вернул необходимые данные');\n      }\n      saveUserToStorage(data);\n      await fetchCart(data.user.id);\n      return data;\n    } catch (error) {\n      safeSetState({\n        error: error.message\n      });\n      throw error;\n    } finally {\n      safeSetState({\n        isLoading: false\n      });\n    }\n  };\n\n  // Выход из аккаунта\n  const logout = () => {\n    localStorage.removeItem('user');\n    localStorage.removeItem('token');\n    safeSetState({\n      user: null,\n      isAuthenticated: false,\n      cartItems: []\n    });\n  };\n\n  // Инициализация при монтировании\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    const user = localStorage.getItem('user');\n    if (token && validateToken(token) && user) {\n      try {\n        safeSetState({\n          user: JSON.parse(user),\n          isAuthenticated: true\n        });\n        fetchCurrentUser();\n      } catch (e) {\n        console.error('Ошибка инициализации:', e);\n        logout();\n      }\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cartItems: state.cartItems,\n      cartCount: state.cartItems.reduce((sum, item) => sum + item.quantity, 0),\n      addToCart,\n      removeFromCart,\n      updateQuantity,\n      user: state.user,\n      isAuthenticated: state.isAuthenticated,\n      isLoading: state.isLoading,\n      error: state.error,\n      login,\n      logout,\n      register,\n      isAdmin: () => {\n        var _state$user2;\n        return ((_state$user2 = state.user) === null || _state$user2 === void 0 ? void 0 : _state$user2.isAdmin) === true;\n      },\n      fetchCurrentUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 326,\n    columnNumber: 5\n  }, this);\n}\n_s(CartProvider, \"W+mChORGELJYphReMNiYfvGQxl0=\");\n_c = CartProvider;\nexport const useCart = () => {\n  _s2();\n  const context = useContext(CartContext);\n  if (!context) {\n    throw new Error('useCart должен использоваться внутри CartProvider');\n  }\n  return context;\n};\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","useRef","toast","jsxDEV","_jsxDEV","API_BASE_URL","CartContext","ADMIN_CREDENTIALS","email","password","CartProvider","children","_s","state","setState","cartItems","user","JSON","parse","localStorage","getItem","isAuthenticated","isLoading","error","isMounted","current","safeSetState","newState","prevState","validateToken","token","split","length","saveUserToStorage","userData","_userData$user","console","Error","setItem","stringify","fetchCurrentUser","logout","response","fetch","headers","ok","status","data","json","fetchCart","userId","items","message","saveCart","_state$user","id","method","body","addToCart","product","existingItem","find","item","productId","updatedCart","map","quantity","name","price","image","cartId","Date","now","success","removeFromCart","filter","updateQuantity","newQuantity","Math","max","register","login","adminData","isAdmin","removeItem","e","Provider","value","cartCount","reduce","sum","_state$user2","fileName","_jsxFileName","lineNumber","columnNumber","_c","useCart","_s2","context","$RefreshReg$"],"sources":["C:/Users/dinat/OneDrive/Рабочий стол/lining/client/src/context/CartContext.js"],"sourcesContent":["import { createContext, useContext, useState, useEffect, useRef } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst API_BASE_URL = 'http://localhost:5000/api';\r\nconst CartContext = createContext();\r\n\r\n// Данные администратора для тестирования\r\nconst ADMIN_CREDENTIALS = {\r\n  email: 'admin1@mail.ru',\r\n  password: 'admin12341234'\r\n};\r\n\r\nexport function CartProvider({ children }) {\r\n  const [state, setState] = useState({\r\n    cartItems: [],\r\n    user: JSON.parse(localStorage.getItem('user')) || null,\r\n    isAuthenticated: !!localStorage.getItem('token'),\r\n    isLoading: false,\r\n    error: null\r\n  });\r\n\r\n  const isMounted = useRef(true);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      isMounted.current = false;\r\n    };\r\n  }, []);\r\n\r\n  const safeSetState = (newState) => {\r\n    if (isMounted.current) {\r\n      setState((prevState) => ({ ...prevState, ...newState }));\r\n    }\r\n  };\r\n\r\n  // Проверка формата JWT токена\r\n  const validateToken = (token) => {\r\n    if (!token) return false;\r\n    return token.split('.').length === 3;\r\n  };\r\n\r\n  // Сохранение пользователя в localStorage и state\r\n  const saveUserToStorage = (userData) => {\r\n    if (!userData?.user?.email || !userData?.token) {\r\n      console.error('Неполные данные пользователя:', userData);\r\n      throw new Error('Отсутствуют обязательные данные пользователя');\r\n    }\r\n\r\n    if (!validateToken(userData.token)) {\r\n      throw new Error('Неверный формат токена');\r\n    }\r\n\r\n    localStorage.setItem('user', JSON.stringify(userData.user));\r\n    localStorage.setItem('token', userData.token);\r\n\r\n    safeSetState({ \r\n      user: userData.user, \r\n      isAuthenticated: true \r\n    });\r\n  };\r\n\r\n  // Получение текущего пользователя с сервера\r\n  const fetchCurrentUser = async () => {\r\n    const token = localStorage.getItem('token');\r\n\r\n    if (!token || !validateToken(token)) {\r\n      logout();\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/auth/me`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      if (!data.user) {\r\n        throw new Error('Неверный формат ответа сервера');\r\n      }\r\n\r\n      localStorage.setItem('user', JSON.stringify(data.user));\r\n      safeSetState({ user: data.user });\r\n    } catch (error) {\r\n      console.error('Ошибка получения пользователя:', error);\r\n      logout();\r\n    }\r\n  };\r\n\r\n  // Получение корзины с сервера\r\n  const fetchCart = async (userId) => {\r\n    if (!userId) return;\r\n\r\n    safeSetState({ isLoading: true, error: null });\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/cart/${userId}`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        }\r\n      });\r\n\r\n      if (!response.ok) throw new Error('Ошибка загрузки корзины');\r\n\r\n      const data = await response.json();\r\n      safeSetState({ cartItems: data.items || [] });\r\n    } catch (error) {\r\n      safeSetState({ error: error.message });\r\n      console.error('Ошибка загрузки корзины:', error);\r\n    } finally {\r\n      safeSetState({ isLoading: false });\r\n    }\r\n  };\r\n\r\n  // Сохранение корзины на сервер\r\n  const saveCart = async (items) => {\r\n    if (!state.user?.id) return;\r\n\r\n    safeSetState({ isLoading: true, error: null });\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/cart/${state.user.id}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        },\r\n        body: JSON.stringify({ items }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Ошибка сохранения корзины');\r\n      }\r\n    } catch (error) {\r\n      safeSetState({ error: error.message });\r\n      console.error('Ошибка сохранения корзины:', error);\r\n    } finally {\r\n      safeSetState({ isLoading: false });\r\n    }\r\n  };\r\n\r\n  // Добавление товара в корзину\r\n  const addToCart = async (product) => {\r\n    if (!state.user) {\r\n      toast.error('Для добавления товаров в корзину необходимо войти в систему');\r\n      return;\r\n    }\r\n\r\n    const existingItem = state.cartItems.find(\r\n      (item) => item.productId === product.id\r\n    );\r\n\r\n    let updatedCart;\r\n    if (existingItem) {\r\n      updatedCart = state.cartItems.map((item) =>\r\n        item.productId === product.id\r\n          ? { ...item, quantity: item.quantity + 1 }\r\n          : item\r\n      );\r\n    } else {\r\n      updatedCart = [\r\n        ...state.cartItems,\r\n        {\r\n          productId: product.id,\r\n          name: product.name,\r\n          price: product.price,\r\n          image: product.image,\r\n          cartId: `${product.id}_${Date.now()}`,\r\n          quantity: 1\r\n        }\r\n      ];\r\n    }\r\n\r\n    safeSetState({ cartItems: updatedCart });\r\n    await saveCart(updatedCart);\r\n    toast.success('Товар добавлен в корзину');\r\n  };\r\n\r\n  // Удаление товара из корзины\r\n  const removeFromCart = async (cartId) => {\r\n    if (!state.user) return;\r\n\r\n    const updatedCart = state.cartItems.filter(\r\n      (item) => item.cartId !== cartId\r\n    );\r\n\r\n    safeSetState({ cartItems: updatedCart });\r\n    await saveCart(updatedCart);\r\n  };\r\n\r\n  // Обновление количества товара\r\n  const updateQuantity = async (cartId, newQuantity) => {\r\n    if (!state.user) return;\r\n\r\n    const updatedCart = state.cartItems.map((item) =>\r\n      item.cartId === cartId\r\n        ? { ...item, quantity: Math.max(1, newQuantity) }\r\n        : item\r\n    );\r\n\r\n    safeSetState({ cartItems: updatedCart });\r\n    await saveCart(updatedCart);\r\n  };\r\n\r\n  // Регистрация пользователя\r\n  const register = async (name, email, password) => {\r\n    safeSetState({ isLoading: true, error: null });\r\n\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/auth/register`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ name, email, password })\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        throw new Error(data.message || 'Ошибка регистрации');\r\n      }\r\n\r\n      if (!data.user || !data.token) {\r\n        throw new Error('Сервер не вернул необходимые данные');\r\n      }\r\n\r\n      saveUserToStorage(data);\r\n      await fetchCart(data.user.id);\r\n\r\n      return data;\r\n    } catch (error) {\r\n      safeSetState({ error: error.message });\r\n      throw error;\r\n    } finally {\r\n      safeSetState({ isLoading: false });\r\n    }\r\n  };\r\n\r\n  // Вход пользователя или админа\r\n  const login = async (email, password) => {\r\n    safeSetState({ isLoading: true, error: null });\r\n\r\n    try {\r\n      if (\r\n        email === ADMIN_CREDENTIALS.email &&\r\n        password === ADMIN_CREDENTIALS.password\r\n      ) {\r\n        const adminData = {\r\n          user: {\r\n            id: 'admin-1',\r\n            name: 'Admin',\r\n            email: ADMIN_CREDENTIALS.email,\r\n            isAdmin: true\r\n          },\r\n          token: 'mock-admin-token'\r\n        };\r\n        saveUserToStorage(adminData);\r\n        return adminData;\r\n      }\r\n\r\n      const response = await fetch(`${API_BASE_URL}/auth/login`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ email, password })\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        throw new Error(data.message || 'Ошибка входа');\r\n      }\r\n\r\n      if (!data.user || !data.token) {\r\n        throw new Error('Сервер не вернул необходимые данные');\r\n      }\r\n\r\n      saveUserToStorage(data);\r\n      await fetchCart(data.user.id);\r\n\r\n      return data;\r\n    } catch (error) {\r\n      safeSetState({ error: error.message });\r\n      throw error;\r\n    } finally {\r\n      safeSetState({ isLoading: false });\r\n    }\r\n  };\r\n\r\n  // Выход из аккаунта\r\n  const logout = () => {\r\n    localStorage.removeItem('user');\r\n    localStorage.removeItem('token');\r\n\r\n    safeSetState({\r\n      user: null,\r\n      isAuthenticated: false,\r\n      cartItems: []\r\n    });\r\n  };\r\n\r\n  // Инициализация при монтировании\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    const user = localStorage.getItem('user');\r\n\r\n    if (token && validateToken(token) && user) {\r\n      try {\r\n        safeSetState({\r\n          user: JSON.parse(user),\r\n          isAuthenticated: true\r\n        });\r\n        fetchCurrentUser();\r\n      } catch (e) {\r\n        console.error('Ошибка инициализации:', e);\r\n        logout();\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <CartContext.Provider\r\n      value={{\r\n        cartItems: state.cartItems,\r\n        cartCount: state.cartItems.reduce((sum, item) => sum + item.quantity, 0),\r\n        addToCart,\r\n        removeFromCart,\r\n        updateQuantity,\r\n        user: state.user,\r\n        isAuthenticated: state.isAuthenticated,\r\n        isLoading: state.isLoading,\r\n        error: state.error,\r\n        login,\r\n        logout,\r\n        register,\r\n        isAdmin: () => state.user?.isAdmin === true,\r\n        fetchCurrentUser\r\n      }}\r\n    >\r\n      {children}\r\n    </CartContext.Provider>\r\n  );\r\n}\r\n\r\nexport const useCart = () => {\r\n  const context = useContext(CartContext);\r\n  if (!context) {\r\n    throw new Error('useCart должен использоваться внутри CartProvider');\r\n  }\r\n  return context;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}