{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dinat\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\lining\\\\client\\\\src\\\\context\\\\CartContext.js\";\nimport { createContext, useContext, useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://localhost:5000/api';\nconst CartContext = /*#__PURE__*/createContext();\n\n// Константы администратора\nconst ADMIN_CREDENTIALS = {\n  email: 'admin1@mail.ru',\n  password: 'admin12341234'\n};\nexport function CartProvider({\n  children\n}) {\n  // ... (остальные состояния остаются без изменений)\n\n  // Модифицированная функция login\n  const login = async (email, password) => {\n    safeSetState(setIsLoading, true);\n    safeSetState(setError, null);\n    try {\n      // Проверяем, это админ или обычный пользователь\n      if (email === ADMIN_CREDENTIALS.email && password === ADMIN_CREDENTIALS.password) {\n        const adminUser = {\n          id: 'admin-1',\n          name: 'Admin',\n          email: ADMIN_CREDENTIALS.email,\n          isAdmin: true,\n          token: 'mock-admin-token',\n          avatar: 'https://i.pravatar.cc/150?u=admin'\n        };\n        localStorage.setItem('user', JSON.stringify(adminUser));\n        localStorage.setItem('token', adminUser.token);\n        safeSetState(setUser, adminUser);\n        safeSetState(setIsAuthenticated, true);\n        await fetchCart(adminUser.id);\n        return adminUser;\n      }\n\n      // Здесь должна быть обычная логика для других пользователей\n      throw new Error('Неверные учетные данные');\n    } catch (error) {\n      safeSetState(setError, error.message);\n      console.error('Ошибка входа:', error);\n      throw error;\n    } finally {\n      safeSetState(setIsLoading, false);\n    }\n  };\n\n  // Добавляем функцию проверки прав администратора\n  const isAdmin = () => {\n    var _user;\n    return ((_user = user) === null || _user === void 0 ? void 0 : _user.isAdmin) === true;\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cartItems,\n      cartCount: cartItems.reduce((sum, item) => sum + item.quantity, 0),\n      addToCart,\n      removeFromCart,\n      updateQuantity,\n      user,\n      isAuthenticated,\n      isLoading,\n      error,\n      login,\n      logout,\n      isAdmin // Добавляем функцию проверки прав\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n_c = CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","useRef","jsxDEV","_jsxDEV","API_BASE_URL","CartContext","ADMIN_CREDENTIALS","email","password","CartProvider","children","login","safeSetState","setIsLoading","setError","adminUser","id","name","isAdmin","token","avatar","localStorage","setItem","JSON","stringify","setUser","setIsAuthenticated","fetchCart","Error","error","message","console","_user","user","Provider","value","cartItems","cartCount","reduce","sum","item","quantity","addToCart","removeFromCart","updateQuantity","isAuthenticated","isLoading","logout","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/dinat/OneDrive/Рабочий стол/lining/client/src/context/CartContext.js"],"sourcesContent":["import { createContext, useContext, useState, useEffect, useRef } from 'react';\r\n\r\nconst API_BASE_URL = 'http://localhost:5000/api';\r\nconst CartContext = createContext();\r\n\r\n// Константы администратора\r\nconst ADMIN_CREDENTIALS = {\r\n  email: 'admin1@mail.ru',\r\n  password: 'admin12341234'\r\n};\r\n\r\nexport function CartProvider({ children }) {\r\n  // ... (остальные состояния остаются без изменений)\r\n\r\n  // Модифицированная функция login\r\n  const login = async (email, password) => {\r\n    safeSetState(setIsLoading, true);\r\n    safeSetState(setError, null);\r\n    \r\n    try {\r\n      // Проверяем, это админ или обычный пользователь\r\n      if (email === ADMIN_CREDENTIALS.email && password === ADMIN_CREDENTIALS.password) {\r\n        const adminUser = {\r\n          id: 'admin-1',\r\n          name: 'Admin',\r\n          email: ADMIN_CREDENTIALS.email,\r\n          isAdmin: true,\r\n          token: 'mock-admin-token',\r\n          avatar: 'https://i.pravatar.cc/150?u=admin'\r\n        };\r\n        \r\n        localStorage.setItem('user', JSON.stringify(adminUser));\r\n        localStorage.setItem('token', adminUser.token);\r\n        safeSetState(setUser, adminUser);\r\n        safeSetState(setIsAuthenticated, true);\r\n        await fetchCart(adminUser.id);\r\n        return adminUser;\r\n      }\r\n      \r\n      // Здесь должна быть обычная логика для других пользователей\r\n      throw new Error('Неверные учетные данные');\r\n      \r\n    } catch (error) {\r\n      safeSetState(setError, error.message);\r\n      console.error('Ошибка входа:', error);\r\n      throw error;\r\n    } finally {\r\n      safeSetState(setIsLoading, false);\r\n    }\r\n  };\r\n\r\n  // Добавляем функцию проверки прав администратора\r\n  const isAdmin = () => {\r\n    return user?.isAdmin === true;\r\n  };\r\n\r\n  return (\r\n    <CartContext.Provider\r\n      value={{\r\n        cartItems,\r\n        cartCount: cartItems.reduce((sum, item) => sum + item.quantity, 0),\r\n        addToCart,\r\n        removeFromCart,\r\n        updateQuantity,\r\n        user,\r\n        isAuthenticated,\r\n        isLoading,\r\n        error,\r\n        login,\r\n        logout,\r\n        isAdmin // Добавляем функцию проверки прав\r\n      }}\r\n    >\r\n      {children}\r\n    </CartContext.Provider>\r\n  );\r\n}"],"mappings":";AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/E,MAAMC,YAAY,GAAG,2BAA2B;AAChD,MAAMC,WAAW,gBAAGR,aAAa,CAAC,CAAC;;AAEnC;AACA,MAAMS,iBAAiB,GAAG;EACxBC,KAAK,EAAE,gBAAgB;EACvBC,QAAQ,EAAE;AACZ,CAAC;AAED,OAAO,SAASC,YAAYA,CAAC;EAAEC;AAAS,CAAC,EAAE;EACzC;;EAEA;EACA,MAAMC,KAAK,GAAG,MAAAA,CAAOJ,KAAK,EAAEC,QAAQ,KAAK;IACvCI,YAAY,CAACC,YAAY,EAAE,IAAI,CAAC;IAChCD,YAAY,CAACE,QAAQ,EAAE,IAAI,CAAC;IAE5B,IAAI;MACF;MACA,IAAIP,KAAK,KAAKD,iBAAiB,CAACC,KAAK,IAAIC,QAAQ,KAAKF,iBAAiB,CAACE,QAAQ,EAAE;QAChF,MAAMO,SAAS,GAAG;UAChBC,EAAE,EAAE,SAAS;UACbC,IAAI,EAAE,OAAO;UACbV,KAAK,EAAED,iBAAiB,CAACC,KAAK;UAC9BW,OAAO,EAAE,IAAI;UACbC,KAAK,EAAE,kBAAkB;UACzBC,MAAM,EAAE;QACV,CAAC;QAEDC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACT,SAAS,CAAC,CAAC;QACvDM,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEP,SAAS,CAACI,KAAK,CAAC;QAC9CP,YAAY,CAACa,OAAO,EAAEV,SAAS,CAAC;QAChCH,YAAY,CAACc,kBAAkB,EAAE,IAAI,CAAC;QACtC,MAAMC,SAAS,CAACZ,SAAS,CAACC,EAAE,CAAC;QAC7B,OAAOD,SAAS;MAClB;;MAEA;MACA,MAAM,IAAIa,KAAK,CAAC,yBAAyB,CAAC;IAE5C,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdjB,YAAY,CAACE,QAAQ,EAAEe,KAAK,CAACC,OAAO,CAAC;MACrCC,OAAO,CAACF,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;MACrC,MAAMA,KAAK;IACb,CAAC,SAAS;MACRjB,YAAY,CAACC,YAAY,EAAE,KAAK,CAAC;IACnC;EACF,CAAC;;EAED;EACA,MAAMK,OAAO,GAAGA,CAAA,KAAM;IAAA,IAAAc,KAAA;IACpB,OAAO,EAAAA,KAAA,GAAAC,IAAI,cAAAD,KAAA,uBAAJA,KAAA,CAAMd,OAAO,MAAK,IAAI;EAC/B,CAAC;EAED,oBACEf,OAAA,CAACE,WAAW,CAAC6B,QAAQ;IACnBC,KAAK,EAAE;MACLC,SAAS;MACTC,SAAS,EAAED,SAAS,CAACE,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAG,GAAGC,IAAI,CAACC,QAAQ,EAAE,CAAC,CAAC;MAClEC,SAAS;MACTC,cAAc;MACdC,cAAc;MACdX,IAAI;MACJY,eAAe;MACfC,SAAS;MACTjB,KAAK;MACLlB,KAAK;MACLoC,MAAM;MACN7B,OAAO,CAAC;IACV,CAAE;IAAAR,QAAA,EAEDA;EAAQ;IAAAsC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B;AAACC,EAAA,GAjEe3C,YAAY;AAAA,IAAA2C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}