{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dinat\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\lining\\\\client\\\\src\\\\context\\\\CartContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useState, useContext } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://localhost:5000/api'; // Пример URL\nconst CartContext = /*#__PURE__*/createContext();\nexport const CartProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [users, setUsers] = useState([{\n    name: 'Администратор',\n    email: 'admin1@mail.ru',\n    password: 'admin12341234',\n    isAdmin: true\n  }]);\n\n  // ✅ Новая функция\n  const fetchCurrentUser = async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/me`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n      if (!response.ok) throw new Error('Не удалось загрузить данные пользователя');\n      const data = await response.json();\n      const userData = {\n        name: data.name,\n        email: data.email,\n        isAdmin: data.isAdmin || false\n      };\n      setUser(userData); // Обновляем состояние\n    } catch (error) {\n      console.error('Ошибка при получении данных пользователя:', error);\n      logout(); // Выходим, если токен невалиден или ошибка\n    }\n  };\n  const login = async (email, password) => {\n    const foundUser = users.find(user => user.email === email && user.password === password);\n    if (foundUser) {\n      const userData = {\n        name: foundUser.name,\n        email: foundUser.email,\n        isAdmin: foundUser.isAdmin || false\n      };\n      setUser(userData);\n      return userData;\n    }\n    throw new Error('Неверные email или пароль');\n  };\n  const register = async (name, email, password) => {\n    const emailExists = users.some(user => user.email === email);\n    if (emailExists) {\n      throw new Error('Пользователь с таким email уже существует');\n    }\n    const newUser = {\n      name,\n      email,\n      password,\n      isAdmin: false\n    };\n    setUsers(prev => [...prev, newUser]);\n    const userData = {\n      name,\n      email,\n      isAdmin: false\n    };\n    setUser(userData);\n    return userData;\n  };\n  const logout = () => {\n    setUser(null);\n  };\n  const isAdmin = () => {\n    return (user === null || user === void 0 ? void 0 : user.isAdmin) === true;\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      user,\n      login,\n      register,\n      logout,\n      isAdmin,\n      fetchCurrentUser // ✅ Передаем функцию в контекст\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n_s(CartProvider, \"banckshJyao+HuwxFsBFzxWkFIY=\");\n_c = CartProvider;\nexport const useCart = () => {\n  _s2();\n  return useContext(CartContext);\n};\n_s2(useCart, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["createContext","useState","useContext","jsxDEV","_jsxDEV","API_BASE_URL","CartContext","CartProvider","children","_s","user","setUser","users","setUsers","name","email","password","isAdmin","fetchCurrentUser","response","fetch","method","headers","localStorage","getItem","ok","Error","data","json","userData","error","console","logout","login","foundUser","find","register","emailExists","some","newUser","prev","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useCart","_s2","$RefreshReg$"],"sources":["C:/Users/dinat/OneDrive/Рабочий стол/lining/client/src/context/CartContext.js"],"sourcesContent":["import { createContext, useState, useContext } from 'react';\r\n\r\nconst API_BASE_URL = 'http://localhost:5000/api'; // Пример URL\r\nconst CartContext = createContext();\r\n\r\nexport const CartProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [users, setUsers] = useState([\r\n    {\r\n      name: 'Администратор',\r\n      email: 'admin1@mail.ru',\r\n      password: 'admin12341234',\r\n      isAdmin: true\r\n    }\r\n  ]);\r\n\r\n  // ✅ Новая функция\r\n  const fetchCurrentUser = async () => {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/auth/me`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        }\r\n      });\r\n\r\n      if (!response.ok) throw new Error('Не удалось загрузить данные пользователя');\r\n\r\n      const data = await response.json();\r\n      const userData = {\r\n        name: data.name,\r\n        email: data.email,\r\n        isAdmin: data.isAdmin || false\r\n      };\r\n\r\n      setUser(userData); // Обновляем состояние\r\n    } catch (error) {\r\n      console.error('Ошибка при получении данных пользователя:', error);\r\n      logout(); // Выходим, если токен невалиден или ошибка\r\n    }\r\n  };\r\n\r\n  const login = async (email, password) => {\r\n    const foundUser = users.find(user => \r\n      user.email === email && user.password === password\r\n    );\r\n\r\n    if (foundUser) {\r\n      const userData = {\r\n        name: foundUser.name,\r\n        email: foundUser.email,\r\n        isAdmin: foundUser.isAdmin || false\r\n      };\r\n      setUser(userData);\r\n      return userData;\r\n    }\r\n    \r\n    throw new Error('Неверные email или пароль');\r\n  };\r\n\r\n  const register = async (name, email, password) => {\r\n    const emailExists = users.some(user => user.email === email);\r\n    if (emailExists) {\r\n      throw new Error('Пользователь с таким email уже существует');\r\n    }\r\n\r\n    const newUser = {\r\n      name,\r\n      email,\r\n      password,\r\n      isAdmin: false\r\n    };\r\n\r\n    setUsers(prev => [...prev, newUser]);\r\n\r\n    const userData = {\r\n      name,\r\n      email,\r\n      isAdmin: false\r\n    };\r\n    setUser(userData);\r\n    \r\n    return userData;\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n  };\r\n\r\n  const isAdmin = () => {\r\n    return user?.isAdmin === true;\r\n  };\r\n\r\n  return (\r\n    <CartContext.Provider value={{ \r\n      user, \r\n      login, \r\n      register, \r\n      logout, \r\n      isAdmin,\r\n      fetchCurrentUser // ✅ Передаем функцию в контекст\r\n    }}>\r\n      {children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useCart = () => useContext(CartContext);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}