{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dinat\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\lining\\\\client\\\\src\\\\context\\\\CartContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext();\nexport const CartProvider = ({\n  children\n}) => {\n  _s();\n  const [cart, setCart] = useState([]);\n  const [user, setUser] = useState(null);\n  const [isAdmin, setIsAdmin] = useState(false);\n  const [users, setUsers] = useState([\n  // Предустановленный администратор\n  {\n    id: 1,\n    name: 'Admin',\n    email: 'admin@example.com',\n    password: 'admin123',\n    isAdmin: true\n  },\n  // Обычный пользователь для теста\n  {\n    id: 2,\n    name: 'User',\n    email: 'user@example.com',\n    password: 'user123',\n    isAdmin: false\n  }]);\n\n  // Проверка аутентификации при загрузке\n  useEffect(() => {\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      const parsedUser = JSON.parse(storedUser);\n      setUser(parsedUser);\n      setIsAdmin(parsedUser.isAdmin || false);\n    }\n  }, []);\n\n  // Функция входа\n  const login = async (email, password) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        const foundUser = users.find(u => u.email === email && u.password === password);\n        if (foundUser) {\n          setUser(foundUser);\n          setIsAdmin(foundUser.isAdmin);\n          localStorage.setItem('user', JSON.stringify(foundUser));\n          resolve(foundUser);\n        } else {\n          reject(new Error('Неверный email или пароль'));\n        }\n      }, 500); // Имитация задержки сети\n    });\n  };\n\n  // Функция регистрации\n  const register = async (name, email, password) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        // Проверка на существующего пользователя\n        if (users.some(u => u.email === email)) {\n          reject(new Error('Пользователь с таким email уже существует'));\n          return;\n        }\n        const newUser = {\n          id: Date.now(),\n          name,\n          email,\n          password,\n          isAdmin: false\n        };\n        setUsers([...users, newUser]);\n        setUser(newUser);\n        localStorage.setItem('user', JSON.stringify(newUser));\n        resolve(newUser);\n      }, 500);\n    });\n  };\n\n  // Выход из системы\n  const logout = () => {\n    setUser(null);\n    setIsAdmin(false);\n    localStorage.removeItem('user');\n  };\n\n  // Функции корзины\n  const addToCart = product => setCart([...cart, product]);\n  const removeFromCart = productId => setCart(cart.filter(item => item.id !== productId));\n  const clearCart = () => setCart([]);\n  const fetchCurrentUser = async () => {\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      const parsedUser = JSON.parse(storedUser);\n      setUser(parsedUser);\n      setIsAdmin(parsedUser.isAdmin || false);\n      return parsedUser;\n    }\n    return null;\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart,\n      user,\n      isAdmin,\n      users,\n      addToCart,\n      removeFromCart,\n      clearCart,\n      login,\n      register,\n      fetchCurrentUser,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n_s(CartProvider, \"U0EyIXCz4P+x8vhhun7RgFGHiws=\");\n_c = CartProvider;\nexport const useCart = () => {\n  _s2();\n  return useContext(CartContext);\n};\n_s2(useCart, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","toast","jsxDEV","_jsxDEV","CartContext","CartProvider","children","_s","cart","setCart","user","setUser","isAdmin","setIsAdmin","users","setUsers","id","name","email","password","storedUser","localStorage","getItem","parsedUser","JSON","parse","login","Promise","resolve","reject","setTimeout","foundUser","find","u","setItem","stringify","Error","register","some","newUser","Date","now","logout","removeItem","addToCart","product","removeFromCart","productId","filter","item","clearCart","fetchCurrentUser","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useCart","_s2","$RefreshReg$"],"sources":["C:/Users/dinat/OneDrive/Рабочий стол/lining/client/src/context/CartContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst CartContext = createContext();\r\n\r\nexport const CartProvider = ({ children }) => {\r\n  const [cart, setCart] = useState([]);\r\n  const [user, setUser] = useState(null);\r\n  const [isAdmin, setIsAdmin] = useState(false);\r\n  const [users, setUsers] = useState([\r\n    // Предустановленный администратор\r\n    {\r\n      id: 1,\r\n      name: 'Admin',\r\n      email: 'admin@example.com',\r\n      password: 'admin123',\r\n      isAdmin: true\r\n    },\r\n    // Обычный пользователь для теста\r\n    {\r\n      id: 2,\r\n      name: 'User',\r\n      email: 'user@example.com',\r\n      password: 'user123',\r\n      isAdmin: false\r\n    }\r\n  ]);\r\n\r\n  // Проверка аутентификации при загрузке\r\n  useEffect(() => {\r\n    const storedUser = localStorage.getItem('user');\r\n    if (storedUser) {\r\n      const parsedUser = JSON.parse(storedUser);\r\n      setUser(parsedUser);\r\n      setIsAdmin(parsedUser.isAdmin || false);\r\n    }\r\n  }, []);\r\n\r\n  // Функция входа\r\n  const login = async (email, password) => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        const foundUser = users.find(\r\n          u => u.email === email && u.password === password\r\n        );\r\n\r\n        if (foundUser) {\r\n          setUser(foundUser);\r\n          setIsAdmin(foundUser.isAdmin);\r\n          localStorage.setItem('user', JSON.stringify(foundUser));\r\n          resolve(foundUser);\r\n        } else {\r\n          reject(new Error('Неверный email или пароль'));\r\n        }\r\n      }, 500); // Имитация задержки сети\r\n    });\r\n  };\r\n\r\n  // Функция регистрации\r\n  const register = async (name, email, password) => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        // Проверка на существующего пользователя\r\n        if (users.some(u => u.email === email)) {\r\n          reject(new Error('Пользователь с таким email уже существует'));\r\n          return;\r\n        }\r\n\r\n        const newUser = {\r\n          id: Date.now(),\r\n          name,\r\n          email,\r\n          password,\r\n          isAdmin: false\r\n        };\r\n\r\n        setUsers([...users, newUser]);\r\n        setUser(newUser);\r\n        localStorage.setItem('user', JSON.stringify(newUser));\r\n        resolve(newUser);\r\n      }, 500);\r\n    });\r\n  };\r\n\r\n  // Выход из системы\r\n  const logout = () => {\r\n    setUser(null);\r\n    setIsAdmin(false);\r\n    localStorage.removeItem('user');\r\n  };\r\n\r\n  // Функции корзины\r\n  const addToCart = (product) => setCart([...cart, product]);\r\n    const removeFromCart = (productId) => setCart(cart.filter(item => item.id !== productId));\r\n    const clearCart = () => setCart([]);\r\n    const fetchCurrentUser = async () => {\r\n      const storedUser = localStorage.getItem('user');\r\n      if (storedUser) {\r\n        const parsedUser = JSON.parse(storedUser);\r\n        setUser(parsedUser);\r\n        setIsAdmin(parsedUser.isAdmin || false);\r\n        return parsedUser;\r\n      }\r\n      return null;\r\n    };\r\n  return (\r\n    <CartContext.Provider\r\n      value={{\r\n        cart,\r\n        user,\r\n        isAdmin,\r\n        users,\r\n        addToCart,\r\n        removeFromCart,\r\n        clearCart,\r\n        login,\r\n        register,\r\n         fetchCurrentUser,\r\n        logout\r\n      }}\r\n    >\r\n      {children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useCart = () => useContext(CartContext);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}