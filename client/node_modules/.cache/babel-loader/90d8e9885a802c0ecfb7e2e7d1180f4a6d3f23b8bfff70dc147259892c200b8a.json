{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dinat\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\lining\\\\client\\\\src\\\\context\\\\CartContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useState, useContext } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext();\nexport const CartProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  // Состояние для хранения зарегистрированных пользователей (в реальном приложении это будет API/база данных)\n  const [users, setUsers] = useState([\n  // Предзаполненный администратор\n  {\n    name: 'Администратор',\n    email: 'admin1@mail.ru',\n    password: 'admin12341234',\n    isAdmin: true\n  }]);\n  const login = async (email, password) => {\n    // Ищем пользователя в массиве users\n    const foundUser = users.find(user => user.email === email && user.password === password);\n    if (foundUser) {\n      // Создаем объект пользователя без пароля для безопасности\n      const userData = {\n        name: foundUser.name,\n        email: foundUser.email,\n        isAdmin: foundUser.isAdmin || false\n      };\n      setUser(userData);\n      return userData;\n    }\n    throw new Error('Неверные email или пароль');\n  };\n  const register = async (name, email, password) => {\n    // Проверяем, не занят ли email\n    const emailExists = users.some(user => user.email === email);\n    if (emailExists) {\n      throw new Error('Пользователь с таким email уже существует');\n    }\n\n    // Создаем нового пользователя\n    const newUser = {\n      name,\n      email,\n      password,\n      // В реальном приложении пароль должен быть хеширован!\n      isAdmin: false\n    };\n\n    // Добавляем в \"базу данных\"\n    setUsers(prev => [...prev, newUser]);\n\n    // Автоматически входим после регистрации\n    const userData = {\n      name,\n      email,\n      isAdmin: false\n    };\n    setUser(userData);\n    return userData;\n  };\n  const logout = () => {\n    setUser(null);\n  };\n  const isAdmin = () => {\n    return (user === null || user === void 0 ? void 0 : user.isAdmin) === true;\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      user,\n      login,\n      register,\n      logout,\n      isAdmin\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s(CartProvider, \"qhUrWRh57tTQLXO2cPqri+FtE2w=\");\n_c = CartProvider;\nexport const useCart = () => {\n  _s2();\n  return useContext(CartContext);\n};\n_s2(useCart, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["createContext","useState","useContext","jsxDEV","_jsxDEV","CartContext","CartProvider","children","_s","user","setUser","users","setUsers","name","email","password","isAdmin","login","foundUser","find","userData","Error","register","emailExists","some","newUser","prev","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useCart","_s2","$RefreshReg$"],"sources":["C:/Users/dinat/OneDrive/Рабочий стол/lining/client/src/context/CartContext.js"],"sourcesContent":["import { createContext, useState, useContext } from 'react';\r\n\r\nconst CartContext = createContext();\r\n\r\nexport const CartProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  // Состояние для хранения зарегистрированных пользователей (в реальном приложении это будет API/база данных)\r\n  const [users, setUsers] = useState([\r\n    // Предзаполненный администратор\r\n    {\r\n      name: 'Администратор',\r\n      email: 'admin1@mail.ru',\r\n      password: 'admin12341234',\r\n      isAdmin: true\r\n    }\r\n  ]);\r\n\r\n  const login = async (email, password) => {\r\n    // Ищем пользователя в массиве users\r\n    const foundUser = users.find(user => \r\n      user.email === email && user.password === password\r\n    );\r\n\r\n    if (foundUser) {\r\n      // Создаем объект пользователя без пароля для безопасности\r\n      const userData = {\r\n        name: foundUser.name,\r\n        email: foundUser.email,\r\n        isAdmin: foundUser.isAdmin || false\r\n      };\r\n      setUser(userData);\r\n      return userData;\r\n    }\r\n    \r\n    throw new Error('Неверные email или пароль');\r\n  };\r\n\r\n  const register = async (name, email, password) => {\r\n    // Проверяем, не занят ли email\r\n    const emailExists = users.some(user => user.email === email);\r\n    if (emailExists) {\r\n      throw new Error('Пользователь с таким email уже существует');\r\n    }\r\n\r\n    // Создаем нового пользователя\r\n    const newUser = {\r\n      name,\r\n      email,\r\n      password, // В реальном приложении пароль должен быть хеширован!\r\n      isAdmin: false\r\n    };\r\n\r\n    // Добавляем в \"базу данных\"\r\n    setUsers(prev => [...prev, newUser]);\r\n\r\n    // Автоматически входим после регистрации\r\n    const userData = {\r\n      name,\r\n      email,\r\n      isAdmin: false\r\n    };\r\n    setUser(userData);\r\n    \r\n    return userData;\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n  };\r\n\r\n  const isAdmin = () => {\r\n    return user?.isAdmin === true;\r\n  };\r\n\r\n  return (\r\n    <CartContext.Provider value={{ user, login, register, logout, isAdmin }}>\r\n      {children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useCart = () => useContext(CartContext);"],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5D,MAAMC,WAAW,gBAAGL,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMM,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACtC;EACA,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC;EACjC;EACA;IACEY,IAAI,EAAE,eAAe;IACrBC,KAAK,EAAE,gBAAgB;IACvBC,QAAQ,EAAE,eAAe;IACzBC,OAAO,EAAE;EACX,CAAC,CACF,CAAC;EAEF,MAAMC,KAAK,GAAG,MAAAA,CAAOH,KAAK,EAAEC,QAAQ,KAAK;IACvC;IACA,MAAMG,SAAS,GAAGP,KAAK,CAACQ,IAAI,CAACV,IAAI,IAC/BA,IAAI,CAACK,KAAK,KAAKA,KAAK,IAAIL,IAAI,CAACM,QAAQ,KAAKA,QAC5C,CAAC;IAED,IAAIG,SAAS,EAAE;MACb;MACA,MAAME,QAAQ,GAAG;QACfP,IAAI,EAAEK,SAAS,CAACL,IAAI;QACpBC,KAAK,EAAEI,SAAS,CAACJ,KAAK;QACtBE,OAAO,EAAEE,SAAS,CAACF,OAAO,IAAI;MAChC,CAAC;MACDN,OAAO,CAACU,QAAQ,CAAC;MACjB,OAAOA,QAAQ;IACjB;IAEA,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;EAC9C,CAAC;EAED,MAAMC,QAAQ,GAAG,MAAAA,CAAOT,IAAI,EAAEC,KAAK,EAAEC,QAAQ,KAAK;IAChD;IACA,MAAMQ,WAAW,GAAGZ,KAAK,CAACa,IAAI,CAACf,IAAI,IAAIA,IAAI,CAACK,KAAK,KAAKA,KAAK,CAAC;IAC5D,IAAIS,WAAW,EAAE;MACf,MAAM,IAAIF,KAAK,CAAC,2CAA2C,CAAC;IAC9D;;IAEA;IACA,MAAMI,OAAO,GAAG;MACdZ,IAAI;MACJC,KAAK;MACLC,QAAQ;MAAE;MACVC,OAAO,EAAE;IACX,CAAC;;IAED;IACAJ,QAAQ,CAACc,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAED,OAAO,CAAC,CAAC;;IAEpC;IACA,MAAML,QAAQ,GAAG;MACfP,IAAI;MACJC,KAAK;MACLE,OAAO,EAAE;IACX,CAAC;IACDN,OAAO,CAACU,QAAQ,CAAC;IAEjB,OAAOA,QAAQ;EACjB,CAAC;EAED,MAAMO,MAAM,GAAGA,CAAA,KAAM;IACnBjB,OAAO,CAAC,IAAI,CAAC;EACf,CAAC;EAED,MAAMM,OAAO,GAAGA,CAAA,KAAM;IACpB,OAAO,CAAAP,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEO,OAAO,MAAK,IAAI;EAC/B,CAAC;EAED,oBACEZ,OAAA,CAACC,WAAW,CAACuB,QAAQ;IAACC,KAAK,EAAE;MAAEpB,IAAI;MAAEQ,KAAK;MAAEK,QAAQ;MAAEK,MAAM;MAAEX;IAAQ,CAAE;IAAAT,QAAA,EACrEA;EAAQ;IAAAuB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACzB,EAAA,CA3EWF,YAAY;AAAA4B,EAAA,GAAZ5B,YAAY;AA6EzB,OAAO,MAAM6B,OAAO,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMlC,UAAU,CAACG,WAAW,CAAC;AAAA;AAAC+B,GAAA,CAAxCD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}