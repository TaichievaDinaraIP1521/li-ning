{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dinat\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\lining\\\\client\\\\src\\\\context\\\\CartContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect, useRef } from 'react';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://localhost:5000/api';\nconst CartContext = /*#__PURE__*/createContext();\n\n// Данные администратора для тестирования\nconst ADMIN_CREDENTIALS = {\n  email: 'admin1@mail.ru',\n  password: 'admin12341234'\n};\nexport function CartProvider({\n  children\n}) {\n  _s();\n  const [state, setState] = useState({\n    cartItems: [],\n    user: JSON.parse(localStorage.getItem('user')) || null,\n    isAuthenticated: !!localStorage.getItem('user'),\n    isLoading: false,\n    error: null\n  });\n  const isMounted = useRef(true);\n  useEffect(() => {\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n  const safeSetState = newState => {\n    if (isMounted.current) {\n      setState(prevState => ({\n        ...prevState,\n        ...newState\n      }));\n    }\n  };\n\n  // Сохранение пользователя в localStorage и state\n  const saveUserToStorage = userData => {\n    localStorage.setItem('user', JSON.stringify(userData.user));\n    localStorage.setItem('token', userData.token);\n    safeSetState({\n      user: userData.user,\n      isAuthenticated: true\n    });\n  };\n\n  // Получение текущего пользователя с сервера\n  const fetchCurrentUser = async () => {\n    const token = localStorage.getItem('token');\n    if (!token) return;\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/me`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (!response.ok) throw new Error('Не удалось получить данные пользователя');\n      const data = await response.json();\n      const userData = data.user;\n      localStorage.setItem('user', JSON.stringify(userData));\n      safeSetState({\n        user: userData\n      });\n      if (userData.id) {\n        fetchCart(userData.id);\n      }\n    } catch (error) {\n      console.error('Ошибка получения текущего пользователя:', error);\n      logout(); // Логаут, если токен недействителен\n    }\n  };\n\n  // Загрузка данных пользователя и корзины при монтировании\n  useEffect(() => {\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      try {\n        const parsedUser = JSON.parse(storedUser);\n        safeSetState({\n          user: parsedUser,\n          isAuthenticated: true\n        });\n\n        // Подгрузка актуальных данных пользователя\n        fetchCurrentUser();\n      } catch (e) {\n        console.error('Ошибка парсинга пользователя из localStorage', e);\n      }\n    }\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n\n  // Получение корзины с сервера\n  const fetchCart = async userId => {\n    if (!userId) return;\n    safeSetState({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const response = await fetch(`${API_BASE_URL}/cart/${userId}`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n      if (!response.ok) throw new Error('Ошибка загрузки корзины');\n      const data = await response.json();\n      safeSetState({\n        cartItems: data.items || []\n      });\n    } catch (error) {\n      safeSetState({\n        error: error.message\n      });\n      console.error('Ошибка загрузки корзины:', error);\n    } finally {\n      safeSetState({\n        isLoading: false\n      });\n    }\n  };\n\n  // Регистрация пользователя\n  const register = async (name, email, password) => {\n    safeSetState({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name,\n          email,\n          password\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Ошибка регистрации');\n      }\n      const userData = await response.json();\n      if (!userData.user) {\n        throw new Error('Неверный формат ответа сервера');\n      }\n      saveUserToStorage(userData);\n      await fetchCart(userData.user.id);\n      return userData;\n    } catch (error) {\n      safeSetState({\n        error: error.message\n      });\n      throw error;\n    } finally {\n      safeSetState({\n        isLoading: false\n      });\n    }\n  };\n\n  // Вход пользователя или админа\n  const login = async (email, password) => {\n    safeSetState({\n      isLoading: true,\n      error: null\n    });\n    try {\n      // Проверка на админа\n      if (email === ADMIN_CREDENTIALS.email && password === ADMIN_CREDENTIALS.password) {\n        const adminUser = {\n          id: 'admin-1',\n          name: 'Admin',\n          email: ADMIN_CREDENTIALS.email,\n          isAdmin: true,\n          token: 'mock-admin-token'\n        };\n        localStorage.setItem('user', JSON.stringify(adminUser));\n        localStorage.setItem('token', adminUser.token);\n        safeSetState({\n          user: adminUser,\n          isAuthenticated: true,\n          isLoading: false\n        });\n        return adminUser;\n      }\n\n      // Логика для обычного пользователя\n      const response = await fetch(`${API_BASE_URL}/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Ошибка входа');\n      }\n      const userData = await response.json();\n      if (!userData.user) {\n        throw new Error('Неверный формат данных пользователя');\n      }\n      saveUserToStorage(userData);\n      await fetchCart(userData.user.id);\n      return userData;\n    } catch (error) {\n      safeSetState({\n        error: error.message\n      });\n      throw error;\n    } finally {\n      safeSetState({\n        isLoading: false\n      });\n    }\n  };\n\n  // Выход из аккаунта\n  const logout = () => {\n    localStorage.removeItem('user');\n    localStorage.removeItem('token');\n    safeSetState({\n      user: null,\n      isAuthenticated: false,\n      cartItems: []\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cartItems: state.cartItems,\n      cartCount: state.cartItems.reduce((sum, item) => sum + item.quantity, 0),\n      addToCart: () => {},\n      // ← добавь логику, если нужно\n      removeFromCart: () => {},\n      // ← добавь логику, если нужно\n      updateQuantity: () => {},\n      // ← добавь логику, если нужно\n      user: state.user,\n      isAuthenticated: state.isAuthenticated,\n      isLoading: state.isLoading,\n      error: state.error,\n      login,\n      logout,\n      register,\n      isAdmin: () => {\n        var _state$user;\n        return ((_state$user = state.user) === null || _state$user === void 0 ? void 0 : _state$user.isAdmin) === true;\n      },\n      fetchCurrentUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 224,\n    columnNumber: 5\n  }, this);\n}\n_s(CartProvider, \"cCTeucHHgBkU3mSgEVKb5wp1gCA=\");\n_c = CartProvider;\nexport const useCart = () => {\n  _s2();\n  const context = useContext(CartContext);\n  if (!context) {\n    throw new Error('useCart должен использоваться внутри CartProvider');\n  }\n  return context;\n};\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","useRef","toast","jsxDEV","_jsxDEV","API_BASE_URL","CartContext","ADMIN_CREDENTIALS","email","password","CartProvider","children","_s","state","setState","cartItems","user","JSON","parse","localStorage","getItem","isAuthenticated","isLoading","error","isMounted","current","safeSetState","newState","prevState","saveUserToStorage","userData","setItem","stringify","token","fetchCurrentUser","response","fetch","headers","ok","Error","data","json","id","fetchCart","console","logout","storedUser","parsedUser","e","userId","items","message","register","name","method","body","errorData","login","adminUser","isAdmin","removeItem","Provider","value","cartCount","reduce","sum","item","quantity","addToCart","removeFromCart","updateQuantity","_state$user","fileName","_jsxFileName","lineNumber","columnNumber","_c","useCart","_s2","context","$RefreshReg$"],"sources":["C:/Users/dinat/OneDrive/Рабочий стол/lining/client/src/context/CartContext.js"],"sourcesContent":["import { createContext, useContext, useState, useEffect, useRef } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst API_BASE_URL = 'http://localhost:5000/api';\r\nconst CartContext = createContext();\r\n\r\n// Данные администратора для тестирования\r\nconst ADMIN_CREDENTIALS = {\r\n  email: 'admin1@mail.ru',\r\n  password: 'admin12341234'\r\n};\r\n\r\nexport function CartProvider({ children }) {\r\n  const [state, setState] = useState({\r\n    cartItems: [],\r\n    user: JSON.parse(localStorage.getItem('user')) || null,\r\n    isAuthenticated: !!localStorage.getItem('user'),\r\n    isLoading: false,\r\n    error: null\r\n  });\r\n\r\n  const isMounted = useRef(true);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      isMounted.current = false;\r\n    };\r\n  }, []);\r\n\r\n  const safeSetState = (newState) => {\r\n    if (isMounted.current) {\r\n      setState((prevState) => ({ ...prevState, ...newState }));\r\n    }\r\n  };\r\n\r\n  // Сохранение пользователя в localStorage и state\r\n  const saveUserToStorage = (userData) => {\r\n    localStorage.setItem('user', JSON.stringify(userData.user));\r\n    localStorage.setItem('token', userData.token);\r\n    safeSetState({ user: userData.user, isAuthenticated: true });\r\n  };\r\n\r\n  // Получение текущего пользователя с сервера\r\n  const fetchCurrentUser = async () => {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) return;\r\n\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/auth/me`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`\r\n        }\r\n      });\r\n\r\n      if (!response.ok) throw new Error('Не удалось получить данные пользователя');\r\n\r\n      const data = await response.json();\r\n      const userData = data.user;\r\n\r\n      localStorage.setItem('user', JSON.stringify(userData));\r\n      safeSetState({ user: userData });\r\n\r\n      if (userData.id) {\r\n        fetchCart(userData.id);\r\n      }\r\n    } catch (error) {\r\n      console.error('Ошибка получения текущего пользователя:', error);\r\n      logout(); // Логаут, если токен недействителен\r\n    }\r\n  };\r\n\r\n  // Загрузка данных пользователя и корзины при монтировании\r\n  useEffect(() => {\r\n    const storedUser = localStorage.getItem('user');\r\n    if (storedUser) {\r\n      try {\r\n        const parsedUser = JSON.parse(storedUser);\r\n        safeSetState({ user: parsedUser, isAuthenticated: true });\r\n\r\n        // Подгрузка актуальных данных пользователя\r\n        fetchCurrentUser();\r\n      } catch (e) {\r\n        console.error('Ошибка парсинга пользователя из localStorage', e);\r\n      }\r\n    }\r\n\r\n    return () => {\r\n      isMounted.current = false;\r\n    };\r\n  }, []);\r\n\r\n  // Получение корзины с сервера\r\n  const fetchCart = async (userId) => {\r\n    if (!userId) return;\r\n\r\n    safeSetState({ isLoading: true, error: null });\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/cart/${userId}`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        }\r\n      });\r\n\r\n      if (!response.ok) throw new Error('Ошибка загрузки корзины');\r\n\r\n      const data = await response.json();\r\n      safeSetState({ cartItems: data.items || [] });\r\n    } catch (error) {\r\n      safeSetState({ error: error.message });\r\n      console.error('Ошибка загрузки корзины:', error);\r\n    } finally {\r\n      safeSetState({ isLoading: false });\r\n    }\r\n  };\r\n\r\n  // Регистрация пользователя\r\n  const register = async (name, email, password) => {\r\n    safeSetState({ isLoading: true, error: null });\r\n\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/auth/register`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ name, email, password })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.message || 'Ошибка регистрации');\r\n      }\r\n\r\n      const userData = await response.json();\r\n\r\n      if (!userData.user) {\r\n        throw new Error('Неверный формат ответа сервера');\r\n      }\r\n\r\n      saveUserToStorage(userData);\r\n      await fetchCart(userData.user.id);\r\n\r\n      return userData;\r\n    } catch (error) {\r\n      safeSetState({ error: error.message });\r\n      throw error;\r\n    } finally {\r\n      safeSetState({ isLoading: false });\r\n    }\r\n  };\r\n\r\n  // Вход пользователя или админа\r\n  const login = async (email, password) => {\r\n    safeSetState({ isLoading: true, error: null });\r\n\r\n    try {\r\n      // Проверка на админа\r\n      if (\r\n        email === ADMIN_CREDENTIALS.email &&\r\n        password === ADMIN_CREDENTIALS.password\r\n      ) {\r\n        const adminUser = {\r\n          id: 'admin-1',\r\n          name: 'Admin',\r\n          email: ADMIN_CREDENTIALS.email,\r\n          isAdmin: true,\r\n          token: 'mock-admin-token'\r\n        };\r\n\r\n        localStorage.setItem('user', JSON.stringify(adminUser));\r\n        localStorage.setItem('token', adminUser.token);\r\n\r\n        safeSetState({\r\n          user: adminUser,\r\n          isAuthenticated: true,\r\n          isLoading: false\r\n        });\r\n\r\n        return adminUser;\r\n      }\r\n\r\n      // Логика для обычного пользователя\r\n      const response = await fetch(`${API_BASE_URL}/auth/login`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ email, password })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.message || 'Ошибка входа');\r\n      }\r\n\r\n      const userData = await response.json();\r\n\r\n      if (!userData.user) {\r\n        throw new Error('Неверный формат данных пользователя');\r\n      }\r\n\r\n      saveUserToStorage(userData);\r\n      await fetchCart(userData.user.id);\r\n\r\n      return userData;\r\n    } catch (error) {\r\n      safeSetState({ error: error.message });\r\n      throw error;\r\n    } finally {\r\n      safeSetState({ isLoading: false });\r\n    }\r\n  };\r\n\r\n  // Выход из аккаунта\r\n  const logout = () => {\r\n    localStorage.removeItem('user');\r\n    localStorage.removeItem('token');\r\n\r\n    safeSetState({\r\n      user: null,\r\n      isAuthenticated: false,\r\n      cartItems: []\r\n    });\r\n  };\r\n\r\n  return (\r\n    <CartContext.Provider\r\n      value={{\r\n        cartItems: state.cartItems,\r\n        cartCount: state.cartItems.reduce((sum, item) => sum + item.quantity, 0),\r\n        addToCart: () => {}, // ← добавь логику, если нужно\r\n        removeFromCart: () => {}, // ← добавь логику, если нужно\r\n        updateQuantity: () => {}, // ← добавь логику, если нужно\r\n        user: state.user,\r\n        isAuthenticated: state.isAuthenticated,\r\n        isLoading: state.isLoading,\r\n        error: state.error,\r\n        login,\r\n        logout,\r\n        register,\r\n        isAdmin: () => state.user?.isAdmin === true,\r\n        fetchCurrentUser\r\n      }}\r\n    >\r\n      {children}\r\n    </CartContext.Provider>\r\n  );\r\n}\r\n\r\nexport const useCart = () => {\r\n  const context = useContext(CartContext);\r\n  if (!context) {\r\n    throw new Error('useCart должен использоваться внутри CartProvider');\r\n  }\r\n  return context;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}