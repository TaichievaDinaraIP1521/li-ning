{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dinat\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\lining\\\\client\\\\src\\\\context\\\\CartContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://localhost:5000/api';\nconst CartContext = /*#__PURE__*/createContext();\n\n// Данные администратора для тестирования\nconst ADMIN_CREDENTIALS = {\n  email: 'admin1@mail.ru',\n  password: 'admin12341234'\n};\nexport function CartProvider({\n  children\n}) {\n  _s();\n  const [state, setState] = useState({\n    cartItems: [],\n    user: JSON.parse(localStorage.getItem('user')) || null,\n    isAuthenticated: !!localStorage.getItem('user'),\n    isLoading: false,\n    error: null\n  });\n\n  // Для защиты от обновления unmounted компонентов\n  const isMounted = useRef(true);\n  useEffect(() => {\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n  const safeSetState = newState => {\n    if (isMounted.current) {\n      setState(prevState => ({\n        ...prevState,\n        ...newState\n      }));\n    }\n  };\n\n  // Загрузка данных пользователя и корзины при монтировании\n  useEffect(() => {\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      try {\n        const parsedUser = JSON.parse(storedUser);\n        safeSetState({\n          user: parsedUser,\n          isAuthenticated: true\n        });\n        fetchCart(parsedUser.id);\n      } catch (e) {\n        console.error('Ошибка парсинга пользователя из localStorage', e);\n      }\n    }\n  }, []);\n\n  // Получение корзины с сервера\n  const fetchCart = async userId => {\n    safeSetState({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const response = await fetch(`${API_BASE_URL}/cart/${userId}`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n      if (!response.ok) throw new Error('Ошибка загрузки корзины');\n      const data = await response.json();\n      safeSetState({\n        cartItems: data.items || []\n      });\n    } catch (error) {\n      safeSetState({\n        error: error.message\n      });\n      console.error('Ошибка загрузки корзины:', error);\n    } finally {\n      safeSetState({\n        isLoading: false\n      });\n    }\n  };\n\n  // Сохранение корзины на сервер\n  const saveCart = async items => {\n    if (!state.user) return;\n    safeSetState({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const response = await fetch(`${API_BASE_URL}/cart/${state.user.id}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        },\n        body: JSON.stringify({\n          items\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Ошибка сохранения корзины');\n      }\n    } catch (error) {\n      safeSetState({\n        error: error.message\n      });\n      console.error('Ошибка сохранения корзины:', error);\n    } finally {\n      safeSetState({\n        isLoading: false\n      });\n    }\n  };\n\n  // Добавление товара в корзину\n  const addToCart = async product => {\n    if (!state.user) return;\n    const existingItem = state.cartItems.find(item => item.productId === product.id);\n    let updatedCart;\n    if (existingItem) {\n      updatedCart = state.cartItems.map(item => item.productId === product.id ? {\n        ...item,\n        quantity: item.quantity + 1\n      } : item);\n    } else {\n      updatedCart = [...state.cartItems, {\n        ...product,\n        cartId: `${product.id}_${Date.now()}`,\n        quantity: 1\n      }];\n    }\n    safeSetState({\n      cartItems: updatedCart\n    });\n    await saveCart(updatedCart);\n  };\n\n  // Удаление товара из корзины\n  const removeFromCart = async cartId => {\n    if (!state.user) return;\n    const updatedCart = state.cartItems.filter(item => item.cartId !== cartId);\n    safeSetState({\n      cartItems: updatedCart\n    });\n    await saveCart(updatedCart);\n  };\n\n  // Обновление количества товара\n  const updateQuantity = async (cartId, newQuantity) => {\n    if (!state.user) return;\n    const updatedCart = state.cartItems.map(item => item.cartId === cartId ? {\n      ...item,\n      quantity: Math.max(1, newQuantity)\n    } : item);\n    safeSetState({\n      cartItems: updatedCart\n    });\n    await saveCart(updatedCart);\n  };\n\n  // Вход пользователя или админа\n  const login = async (email, password) => {\n    safeSetState({\n      isLoading: true,\n      error: null\n    });\n    try {\n      // Проверка на админа\n      if (email === ADMIN_CREDENTIALS.email && password === ADMIN_CREDENTIALS.password) {\n        const adminUser = {\n          id: 'admin-1',\n          name: 'Admin',\n          email: ADMIN_CREDENTIALS.email,\n          isAdmin: true,\n          token: 'mock-admin-token',\n          avatar: 'https://i.pravatar.cc/150?u=admin'\n        };\n        localStorage.setItem('user', JSON.stringify(adminUser));\n        localStorage.setItem('token', adminUser.token);\n        safeSetState({\n          user: adminUser,\n          isAuthenticated: true,\n          isLoading: false\n        });\n        await fetchCart(adminUser.id);\n        return adminUser;\n      }\n\n      // Логика для обычного пользователя\n      const response = await fetch(`${API_BASE_URL}/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      if (!response.ok) throw new Error('Ошибка входа');\n      const userData = await response.json();\n      localStorage.setItem('user', JSON.stringify(userData));\n      localStorage.setItem('token', userData.token);\n      safeSetState({\n        user: userData,\n        isAuthenticated: true,\n        isLoading: false\n      });\n      await fetchCart(userData.id);\n      return userData;\n    } catch (error) {\n      safeSetState({\n        error: error.message\n      });\n      console.error('Ошибка входа:', error);\n      throw error;\n    } finally {\n      safeSetState({\n        isLoading: false\n      });\n    }\n  };\n\n  // Выход из аккаунта\n  const logout = () => {\n    localStorage.removeItem('user');\n    localStorage.removeItem('token');\n    safeSetState({\n      user: null,\n      isAuthenticated: false,\n      cartItems: []\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cartItems: state.cartItems,\n      cartCount: state.cartItems.reduce((sum, item) => sum + item.quantity, 0),\n      addToCart,\n      removeFromCart,\n      updateQuantity,\n      user: state.user,\n      isAuthenticated: state.isAuthenticated,\n      isLoading: state.isLoading,\n      error: state.error,\n      login,\n      logout,\n      isAdmin: () => {\n        var _state$user;\n        return ((_state$user = state.user) === null || _state$user === void 0 ? void 0 : _state$user.isAdmin) === true;\n      }\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 228,\n    columnNumber: 5\n  }, this);\n}\n_s(CartProvider, \"cCTeucHHgBkU3mSgEVKb5wp1gCA=\");\n_c = CartProvider;\nexport const useCart = () => {\n  _s2();\n  const context = useContext(CartContext);\n  if (!context) {\n    throw new Error('useCart must be used within a CartProvider');\n  }\n  return context;\n};\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","useRef","jsxDEV","_jsxDEV","API_BASE_URL","CartContext","ADMIN_CREDENTIALS","email","password","CartProvider","children","_s","state","setState","cartItems","user","JSON","parse","localStorage","getItem","isAuthenticated","isLoading","error","isMounted","current","safeSetState","newState","prevState","storedUser","parsedUser","fetchCart","id","e","console","userId","response","fetch","headers","ok","Error","data","json","items","message","saveCart","method","body","stringify","addToCart","product","existingItem","find","item","productId","updatedCart","map","quantity","cartId","Date","now","removeFromCart","filter","updateQuantity","newQuantity","Math","max","login","adminUser","name","isAdmin","token","avatar","setItem","userData","logout","removeItem","Provider","value","cartCount","reduce","sum","_state$user","fileName","_jsxFileName","lineNumber","columnNumber","_c","useCart","_s2","context","$RefreshReg$"],"sources":["C:/Users/dinat/OneDrive/Рабочий стол/lining/client/src/context/CartContext.js"],"sourcesContent":["import { createContext, useContext, useState, useEffect, useRef } from 'react';\r\nconst API_BASE_URL = 'http://localhost:5000/api';\r\nconst CartContext = createContext();\r\n\r\n// Данные администратора для тестирования\r\nconst ADMIN_CREDENTIALS = {\r\n  email: 'admin1@mail.ru',\r\n  password: 'admin12341234'\r\n};\r\n\r\nexport function CartProvider({ children }) {\r\n  const [state, setState] = useState({\r\n    cartItems: [],\r\n    user: JSON.parse(localStorage.getItem('user')) || null,\r\n    isAuthenticated: !!localStorage.getItem('user'),\r\n    isLoading: false,\r\n    error: null\r\n  });\r\n\r\n  // Для защиты от обновления unmounted компонентов\r\n  const isMounted = useRef(true);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      isMounted.current = false;\r\n    };\r\n  }, []);\r\n\r\n  const safeSetState = (newState) => {\r\n    if (isMounted.current) {\r\n      setState((prevState) => ({ ...prevState, ...newState }));\r\n    }\r\n  };\r\n\r\n  // Загрузка данных пользователя и корзины при монтировании\r\n  useEffect(() => {\r\n    const storedUser = localStorage.getItem('user');\r\n    if (storedUser) {\r\n      try {\r\n        const parsedUser = JSON.parse(storedUser);\r\n        safeSetState({ user: parsedUser, isAuthenticated: true });\r\n        fetchCart(parsedUser.id);\r\n      } catch (e) {\r\n        console.error('Ошибка парсинга пользователя из localStorage', e);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  // Получение корзины с сервера\r\n  const fetchCart = async (userId) => {\r\n    safeSetState({ isLoading: true, error: null });\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/cart/${userId}`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        }\r\n      });\r\n\r\n      if (!response.ok) throw new Error('Ошибка загрузки корзины');\r\n\r\n      const data = await response.json();\r\n      safeSetState({ cartItems: data.items || [] });\r\n    } catch (error) {\r\n      safeSetState({ error: error.message });\r\n      console.error('Ошибка загрузки корзины:', error);\r\n    } finally {\r\n      safeSetState({ isLoading: false });\r\n    }\r\n  };\r\n\r\n  // Сохранение корзины на сервер\r\n  const saveCart = async (items) => {\r\n    if (!state.user) return;\r\n\r\n    safeSetState({ isLoading: true, error: null });\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/cart/${state.user.id}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        },\r\n        body: JSON.stringify({ items }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Ошибка сохранения корзины');\r\n      }\r\n    } catch (error) {\r\n      safeSetState({ error: error.message });\r\n      console.error('Ошибка сохранения корзины:', error);\r\n    } finally {\r\n      safeSetState({ isLoading: false });\r\n    }\r\n  };\r\n\r\n  // Добавление товара в корзину\r\n  const addToCart = async (product) => {\r\n    if (!state.user) return;\r\n\r\n    const existingItem = state.cartItems.find(\r\n      (item) => item.productId === product.id\r\n    );\r\n\r\n    let updatedCart;\r\n    if (existingItem) {\r\n      updatedCart = state.cartItems.map((item) =>\r\n        item.productId === product.id\r\n          ? { ...item, quantity: item.quantity + 1 }\r\n          : item\r\n      );\r\n    } else {\r\n      updatedCart = [\r\n        ...state.cartItems,\r\n        {\r\n          ...product,\r\n          cartId: `${product.id}_${Date.now()}`,\r\n          quantity: 1\r\n        }\r\n      ];\r\n    }\r\n\r\n    safeSetState({ cartItems: updatedCart });\r\n    await saveCart(updatedCart);\r\n  };\r\n\r\n  // Удаление товара из корзины\r\n  const removeFromCart = async (cartId) => {\r\n    if (!state.user) return;\r\n\r\n    const updatedCart = state.cartItems.filter(\r\n      (item) => item.cartId !== cartId\r\n    );\r\n\r\n    safeSetState({ cartItems: updatedCart });\r\n    await saveCart(updatedCart);\r\n  };\r\n\r\n  // Обновление количества товара\r\n  const updateQuantity = async (cartId, newQuantity) => {\r\n    if (!state.user) return;\r\n\r\n    const updatedCart = state.cartItems.map((item) =>\r\n      item.cartId === cartId\r\n        ? { ...item, quantity: Math.max(1, newQuantity) }\r\n        : item\r\n    );\r\n\r\n    safeSetState({ cartItems: updatedCart });\r\n    await saveCart(updatedCart);\r\n  };\r\n\r\n  // Вход пользователя или админа\r\n  const login = async (email, password) => {\r\n    safeSetState({ isLoading: true, error: null });\r\n\r\n    try {\r\n      // Проверка на админа\r\n      if (\r\n        email === ADMIN_CREDENTIALS.email &&\r\n        password === ADMIN_CREDENTIALS.password\r\n      ) {\r\n        const adminUser = {\r\n          id: 'admin-1',\r\n          name: 'Admin',\r\n          email: ADMIN_CREDENTIALS.email,\r\n          isAdmin: true,\r\n          token: 'mock-admin-token',\r\n          avatar: 'https://i.pravatar.cc/150?u=admin'\r\n        };\r\n\r\n        localStorage.setItem('user', JSON.stringify(adminUser));\r\n        localStorage.setItem('token', adminUser.token);\r\n\r\n        safeSetState({\r\n          user: adminUser,\r\n          isAuthenticated: true,\r\n          isLoading: false\r\n        });\r\n\r\n        await fetchCart(adminUser.id);\r\n        return adminUser;\r\n      }\r\n\r\n      // Логика для обычного пользователя\r\n      const response = await fetch(`${API_BASE_URL}/auth/login`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ email, password })\r\n      });\r\n\r\n      if (!response.ok) throw new Error('Ошибка входа');\r\n\r\n      const userData = await response.json();\r\n      localStorage.setItem('user', JSON.stringify(userData));\r\n      localStorage.setItem('token', userData.token);\r\n\r\n      safeSetState({\r\n        user: userData,\r\n        isAuthenticated: true,\r\n        isLoading: false\r\n      });\r\n\r\n      await fetchCart(userData.id);\r\n      return userData;\r\n    } catch (error) {\r\n      safeSetState({ error: error.message });\r\n      console.error('Ошибка входа:', error);\r\n      throw error;\r\n    } finally {\r\n      safeSetState({ isLoading: false });\r\n    }\r\n  };\r\n\r\n  // Выход из аккаунта\r\n  const logout = () => {\r\n    localStorage.removeItem('user');\r\n    localStorage.removeItem('token');\r\n\r\n    safeSetState({\r\n      user: null,\r\n      isAuthenticated: false,\r\n      cartItems: []\r\n    });\r\n  };\r\n\r\n  return (\r\n    <CartContext.Provider\r\n      value={{\r\n        cartItems: state.cartItems,\r\n        cartCount: state.cartItems.reduce((sum, item) => sum + item.quantity, 0),\r\n        addToCart,\r\n        removeFromCart,\r\n        updateQuantity,\r\n        user: state.user,\r\n        isAuthenticated: state.isAuthenticated,\r\n        isLoading: state.isLoading,\r\n        error: state.error,\r\n        login,\r\n        logout,\r\n        isAdmin: () => state.user?.isAdmin === true\r\n      }}\r\n    >\r\n      {children}\r\n    </CartContext.Provider>\r\n  );\r\n}\r\n\r\nexport const useCart = () => {\r\n  const context = useContext(CartContext);\r\n  if (!context) {\r\n    throw new Error('useCart must be used within a CartProvider');\r\n  }\r\n  return context;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}