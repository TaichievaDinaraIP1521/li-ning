{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dinat\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\lining\\\\client\\\\src\\\\context\\\\CartContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://localhost:5000/api';\nconst CartContext = /*#__PURE__*/createContext();\nexport function CartProvider({\n  children\n}) {\n  _s();\n  const [state, setState] = useState({\n    cartItems: [],\n    user: JSON.parse(localStorage.getItem('user')) || null,\n    isAuthenticated: !!localStorage.getItem('user'),\n    isLoading: false,\n    error: null\n  });\n  const [cartItems, setCartItems] = useState([]);\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const isMounted = useRef(true);\n  useEffect(() => {\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n  const updateState = newState => {\n    if (isMounted.current) {\n      setState(prev => ({\n        ...prev,\n        ...newState\n      }));\n    }\n  };\n\n  // Восстановление состояния при загрузке\n  useEffect(() => {\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      try {\n        const parsedUser = JSON.parse(storedUser);\n        safeSetState(setUser, parsedUser);\n        safeSetState(setIsAuthenticated, true);\n        fetchCart(parsedUser.id);\n      } catch (e) {\n        console.error('Failed to parse stored user', e);\n      }\n    }\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n  const safeSetState = (setter, value) => {\n    if (isMounted.current) {\n      setter(value);\n    }\n  };\n  const fetchCart = async userId => {\n    updateState({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const response = await fetch(`${API_BASE_URL}/cart/${userId}`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n      if (!response.ok) throw new Error('Ошибка загрузки корзины');\n      const data = await response.json();\n      updateState({\n        cartItems: data.items || []\n      });\n    } catch (error) {\n      updateState({\n        error: error.message\n      });\n      console.error('Ошибка:', error);\n    } finally {\n      updateState({\n        isLoading: false\n      });\n    }\n  };\n  const saveCart = async items => {\n    if (!user) return;\n    safeSetState(setIsLoading, true);\n    safeSetState(setError, null);\n    try {\n      const response = await fetch(`http://localhost:5000/api/cart/${user.id}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        },\n        body: JSON.stringify({\n          items\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Ошибка сохранения корзины');\n      }\n    } catch (error) {\n      safeSetState(setError, error.message);\n      console.error('Ошибка сохранения корзины:', error);\n    } finally {\n      safeSetState(setIsLoading, false);\n    }\n  };\n\n  // Добавление товара\n  const addToCart = async product => {\n    if (!user) return;\n    const existingItem = cartItems.find(item => item.productId === product.id);\n    let updatedCart;\n    if (existingItem) {\n      updatedCart = cartItems.map(item => item.productId === product.id ? {\n        ...item,\n        quantity: item.quantity + 1\n      } : item);\n    } else {\n      updatedCart = [...cartItems, {\n        ...product,\n        cartId: `${product.id}_${Date.now()}`,\n        quantity: 1\n      }];\n    }\n    safeSetState(setCartItems, updatedCart);\n    await saveCart(updatedCart);\n  };\n\n  // Удаление товара\n  const removeFromCart = async cartId => {\n    if (!user) return;\n    const updatedCart = cartItems.filter(item => item.cartId !== cartId);\n    safeSetState(setCartItems, updatedCart);\n    await saveCart(updatedCart);\n  };\n\n  // Обновление количества\n  const updateQuantity = async (cartId, newQuantity) => {\n    if (!user) return;\n    const updatedCart = cartItems.map(item => item.cartId === cartId ? {\n      ...item,\n      quantity: Math.max(1, newQuantity)\n    } : item);\n    safeSetState(setCartItems, updatedCart);\n    await saveCart(updatedCart);\n  };\n\n  // Вход пользователя\n  const ADMIN_CREDENTIALS = {\n    email: 'admin1@mail.ru',\n    password: 'admin12341234'\n  };\n  const login = async (email, password) => {\n    try {\n      // Проверяем, это админ или обычный пользователь\n      if (email === ADMIN_CREDENTIALS.email && password === ADMIN_CREDENTIALS.password) {\n        const adminUser = {\n          id: 'admin-1',\n          name: 'Admin',\n          email: ADMIN_CREDENTIALS.email,\n          isAdmin: true,\n          avatar: 'https://i.pravatar.cc/150?u=admin'\n        };\n        localStorage.setItem('user', JSON.stringify(adminUser));\n        setUser(adminUser);\n        setIsAuthenticated(true);\n        return adminUser;\n      }\n\n      // Обычная логика для других пользователей\n      // ...\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  // Выход\n  const logout = () => {\n    localStorage.removeItem('user');\n    localStorage.removeItem('token');\n    safeSetState(setUser, null);\n    safeSetState(setIsAuthenticated, false);\n    safeSetState(setCartItems, []);\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cartItems,\n      cartCount: cartItems.reduce((sum, item) => sum + item.quantity, 0),\n      addToCart,\n      removeFromCart,\n      updateQuantity,\n      user,\n      isAuthenticated,\n      isLoading,\n      error,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 197,\n    columnNumber: 5\n  }, this);\n}\n_s(CartProvider, \"9Yda+CcmSCpUEESrRBhyyuA4ImY=\");\n_c = CartProvider;\nexport const useCart = () => {\n  _s2();\n  const context = useContext(CartContext);\n  if (!context) {\n    throw new Error('useCart must be used within a CartProvider');\n  }\n  return context;\n};\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","useRef","jsxDEV","_jsxDEV","API_BASE_URL","CartContext","CartProvider","children","_s","state","setState","cartItems","user","JSON","parse","localStorage","getItem","isAuthenticated","isLoading","error","setCartItems","setUser","setIsAuthenticated","setIsLoading","setError","isMounted","current","updateState","newState","prev","storedUser","parsedUser","safeSetState","fetchCart","id","e","console","setter","value","userId","response","fetch","headers","ok","Error","data","json","items","message","saveCart","method","body","stringify","addToCart","product","existingItem","find","item","productId","updatedCart","map","quantity","cartId","Date","now","removeFromCart","filter","updateQuantity","newQuantity","Math","max","ADMIN_CREDENTIALS","email","password","login","adminUser","name","isAdmin","avatar","setItem","logout","removeItem","Provider","cartCount","reduce","sum","fileName","_jsxFileName","lineNumber","columnNumber","_c","useCart","_s2","context","$RefreshReg$"],"sources":["C:/Users/dinat/OneDrive/Рабочий стол/lining/client/src/context/CartContext.js"],"sourcesContent":["import { createContext, useContext, useState, useEffect, useRef } from 'react';\r\n\r\nconst API_BASE_URL = 'http://localhost:5000/api';\r\nconst CartContext = createContext();\r\n\r\nexport function CartProvider({ children }) {\r\n  const [state, setState] = useState({\r\n    cartItems: [],\r\n    user: JSON.parse(localStorage.getItem('user')) || null,\r\n    isAuthenticated: !!localStorage.getItem('user'),\r\n    isLoading: false,\r\n    error: null\r\n  });\r\n  \r\n  const [cartItems, setCartItems] = useState([]);\r\n  const [user, setUser] = useState(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n   const isMounted = useRef(true);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      isMounted.current = false;\r\n    };\r\n  }, []);\r\n\r\n    const updateState = (newState) => {\r\n    if (isMounted.current) {\r\n      setState(prev => ({ ...prev, ...newState }));\r\n    }\r\n  };\r\n\r\n  // Восстановление состояния при загрузке\r\n  useEffect(() => {\r\n    const storedUser = localStorage.getItem('user');\r\n    if (storedUser) {\r\n      try {\r\n        const parsedUser = JSON.parse(storedUser);\r\n        safeSetState(setUser, parsedUser);\r\n        safeSetState(setIsAuthenticated, true);\r\n        fetchCart(parsedUser.id);\r\n      } catch (e) {\r\n        console.error('Failed to parse stored user', e);\r\n      }\r\n    }\r\n\r\n    return () => {\r\n      isMounted.current = false;\r\n    };\r\n  }, []);\r\n\r\n  const safeSetState = (setter, value) => {\r\n    if (isMounted.current) {\r\n      setter(value);\r\n    }\r\n  };\r\n\r\n  const fetchCart = async (userId) => {\r\n    updateState({ isLoading: true, error: null });\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/cart/${userId}`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        }\r\n      });\r\n      \r\n      if (!response.ok) throw new Error('Ошибка загрузки корзины');\r\n      const data = await response.json();\r\n      updateState({ cartItems: data.items || [] });\r\n    } catch (error) {\r\n      updateState({ error: error.message });\r\n      console.error('Ошибка:', error);\r\n    } finally {\r\n      updateState({ isLoading: false });\r\n    }\r\n  };\r\n\r\n  const saveCart = async (items) => {\r\n    if (!user) return;\r\n    \r\n    safeSetState(setIsLoading, true);\r\n    safeSetState(setError, null);\r\n    try {\r\n      const response = await fetch(`http://localhost:5000/api/cart/${user.id}`, {\r\n        method: 'POST',\r\n        headers: { \r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        },\r\n        body: JSON.stringify({ items }),\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error('Ошибка сохранения корзины');\r\n      }\r\n    } catch (error) {\r\n      safeSetState(setError, error.message);\r\n      console.error('Ошибка сохранения корзины:', error);\r\n    } finally {\r\n      safeSetState(setIsLoading, false);\r\n    }\r\n  };\r\n\r\n  // Добавление товара\r\n  const addToCart = async (product) => {\r\n    if (!user) return;\r\n    \r\n    const existingItem = cartItems.find(item => item.productId === product.id);\r\n    let updatedCart;\r\n    \r\n    if (existingItem) {\r\n      updatedCart = cartItems.map(item => \r\n        item.productId === product.id \r\n          ? { ...item, quantity: item.quantity + 1 } \r\n          : item\r\n      );\r\n    } else {\r\n      updatedCart = [\r\n        ...cartItems,\r\n        {\r\n          ...product,\r\n          cartId: `${product.id}_${Date.now()}`,\r\n          quantity: 1\r\n        }\r\n      ];\r\n    }\r\n    \r\n    safeSetState(setCartItems, updatedCart);\r\n    await saveCart(updatedCart);\r\n  };\r\n\r\n  // Удаление товара\r\n  const removeFromCart = async (cartId) => {\r\n    if (!user) return;\r\n    \r\n    const updatedCart = cartItems.filter(item => item.cartId !== cartId);\r\n    safeSetState(setCartItems, updatedCart);\r\n    await saveCart(updatedCart);\r\n  };\r\n\r\n  // Обновление количества\r\n  const updateQuantity = async (cartId, newQuantity) => {\r\n    if (!user) return;\r\n    \r\n    const updatedCart = cartItems.map(item => \r\n      item.cartId === cartId \r\n        ? { ...item, quantity: Math.max(1, newQuantity) } \r\n        : item\r\n    );\r\n    \r\n    safeSetState(setCartItems, updatedCart);\r\n    await saveCart(updatedCart);\r\n  };\r\n\r\n  // Вход пользователя\r\n  const ADMIN_CREDENTIALS = {\r\n  email: 'admin1@mail.ru',\r\n  password: 'admin12341234'\r\n};\r\n\r\nconst login = async (email, password) => {\r\n  try {\r\n    // Проверяем, это админ или обычный пользователь\r\n    if (email === ADMIN_CREDENTIALS.email && password === ADMIN_CREDENTIALS.password) {\r\n      const adminUser = {\r\n        id: 'admin-1',\r\n        name: 'Admin',\r\n        email: ADMIN_CREDENTIALS.email,\r\n        isAdmin: true,\r\n        avatar: 'https://i.pravatar.cc/150?u=admin'\r\n      };\r\n      localStorage.setItem('user', JSON.stringify(adminUser));\r\n      setUser(adminUser);\r\n      setIsAuthenticated(true);\r\n      return adminUser;\r\n    }\r\n    \r\n    // Обычная логика для других пользователей\r\n    // ...\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\n  // Выход\r\n  const logout = () => {\r\n    localStorage.removeItem('user');\r\n    localStorage.removeItem('token');\r\n    safeSetState(setUser, null);\r\n    safeSetState(setIsAuthenticated, false);\r\n    safeSetState(setCartItems, []);\r\n  };\r\n\r\n\r\n  return (\r\n    <CartContext.Provider\r\n      value={{\r\n        cartItems,\r\n        cartCount: cartItems.reduce((sum, item) => sum + item.quantity, 0),\r\n        addToCart,\r\n        removeFromCart,\r\n        updateQuantity,\r\n        user,\r\n        isAuthenticated,\r\n        isLoading,\r\n        error,\r\n        login,\r\n        logout,\r\n      }}\r\n    >\r\n      {children}\r\n    </CartContext.Provider>\r\n  );\r\n}\r\n\r\nexport const useCart = () => {\r\n  const context = useContext(CartContext);\r\n  if (!context) {\r\n    throw new Error('useCart must be used within a CartProvider');\r\n  }\r\n  return context;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}